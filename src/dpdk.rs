/* automatically generated by rust-bindgen */

pub type xmm_t = ::libc::c_void /* FIXME This is incorrect */;
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_xmm {
    pub _bindgen_data_: [u8; 16us],
}
impl Union_rte_xmm {
    pub unsafe fn m(&mut self) -> *mut xmm_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u8(&mut self) -> *mut [u8; 16us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u16(&mut self) -> *mut [u16; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u32(&mut self) -> *mut [u32; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u64(&mut self) -> *mut [u64; 2us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn pd(&mut self) -> *mut [::libc::c_double; 2us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_rte_xmm {
    fn default() -> Union_rte_xmm { unsafe { ::std::mem::zeroed() } }
}
pub type rte_xmm_t = Union_rte_xmm;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_info {
    pub name: [::libc::c_char; 256us],
    pub size: u64,
}
impl ::std::default::Default for Struct_memory_info {
    fn default() -> Struct_memory_info { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memseg_info {
    pub idx: u32,
    pub pfn: u64,
    pub size: u64,
    pub mfn: [u64; 2048us],
}
impl ::std::default::Default for Struct_memseg_info {
    fn default() -> Struct_memseg_info { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memblock_info {
    pub exchange_flag: u8,
    pub used: u8,
    pub vir_addr: u64,
    pub pfn: u64,
    pub mfn: u64,
}
impl ::std::default::Default for Struct_memblock_info {
    fn default() -> Struct_memblock_info { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_page_sizes = ::libc::c_ulong;
pub const RTE_PGSIZE_4K: ::libc::c_ulong = 4096;
pub const RTE_PGSIZE_2M: ::libc::c_ulong = 2097152;
pub const RTE_PGSIZE_1G: ::libc::c_ulong = 1073741824;
pub const RTE_PGSIZE_64K: ::libc::c_ulong = 65536;
pub const RTE_PGSIZE_16M: ::libc::c_ulong = 16777216;
pub const RTE_PGSIZE_16G: ::libc::c_ulong = 17179869184;
pub type phys_addr_t = u64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_memseg {
    pub phys_addr: phys_addr_t,
    pub _bindgen_data_1_: [u64; 1us],
    pub len: ::libc::size_t,
    pub hugepage_sz: u64,
    pub socket_id: i32,
    pub nchannel: u32,
    pub nrank: u32,
}
impl Struct_rte_memseg {
    pub unsafe fn addr(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn addr_64(&mut self) -> *mut u64 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_rte_memseg {
    fn default() -> Struct_rte_memseg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_logs {
    pub _type: u32,
    pub level: u32,
    pub file: *mut ::libc::FILE,
}
impl ::std::default::Default for Struct_rte_logs {
    fn default() -> Struct_rte_logs { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_memzone {
    pub name: [::libc::c_char; 32us],
    pub phys_addr: phys_addr_t,
    pub _bindgen_data_1_: [u64; 1us],
    pub len: ::libc::size_t,
    pub hugepage_sz: u64,
    pub socket_id: i32,
    pub flags: u32,
    pub memseg_id: u32,
}
impl Struct_rte_memzone {
    pub unsafe fn addr(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn addr_64(&mut self) -> *mut u64 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_rte_memzone {
    fn default() -> Struct_rte_memzone { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_malloc_socket_stats {
    pub heap_totalsz_bytes: ::libc::size_t,
    pub heap_freesz_bytes: ::libc::size_t,
    pub greatest_free_size: ::libc::size_t,
    pub free_count: ::libc::c_uint,
    pub alloc_count: ::libc::c_uint,
    pub heap_allocsz_bytes: ::libc::size_t,
}
impl ::std::default::Default for Struct_rte_malloc_socket_stats {
    fn default() -> Struct_rte_malloc_socket_stats {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_entry {
    pub next: Struct_Unnamed1,
    pub data: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_rte_tailq_entry {
    fn default() -> Struct_rte_tailq_entry { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub tqe_next: *mut Struct_rte_tailq_entry,
    pub tqe_prev: *mut *mut Struct_rte_tailq_entry,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_entry_head {
    pub tqh_first: *mut Struct_rte_tailq_entry,
    pub tqh_last: *mut *mut Struct_rte_tailq_entry,
}
impl ::std::default::Default for Struct_rte_tailq_entry_head {
    fn default() -> Struct_rte_tailq_entry_head {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_head {
    pub tailq_head: Struct_rte_tailq_entry_head,
}
impl ::std::default::Default for Struct_rte_tailq_head {
    fn default() -> Struct_rte_tailq_head { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_lcore_role_t = ::libc::c_uint;
pub const ROLE_RTE: ::libc::c_uint = 0;
pub const ROLE_OFF: ::libc::c_uint = 1;
pub type Enum_rte_proc_type_t = ::libc::c_int;
pub const RTE_PROC_AUTO: ::libc::c_int = -1;
pub const RTE_PROC_PRIMARY: ::libc::c_int = 0;
pub const RTE_PROC_SECONDARY: ::libc::c_int = 1;
pub const RTE_PROC_INVALID: ::libc::c_int = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_config {
    pub master_lcore: u32,
    pub lcore_count: u32,
    pub lcore_role: [Enum_rte_lcore_role_t; 128us],
    pub process_type: Enum_rte_proc_type_t,
    pub mem_config: *mut Struct_rte_mem_config,
}
impl ::std::default::Default for Struct_rte_config {
    fn default() -> Struct_rte_config { unsafe { ::std::mem::zeroed() } }
}
pub type rte_usage_hook_t =
    ::std::option::Option<extern "C" fn(prgname: *const ::libc::c_char)
                              -> ()>;
pub type Enum_rte_lcore_state_t = ::libc::c_uint;
pub const WAIT: ::libc::c_uint = 0;
pub const RUNNING: ::libc::c_uint = 1;
pub const FINISHED: ::libc::c_uint = 2;
pub type lcore_function_t =
    extern "C" fn(arg1: *mut ::libc::c_void) -> ::libc::c_int;
pub type Enum_rte_rmt_call_master_t = ::libc::c_uint;
pub const SKIP_MASTER: ::libc::c_uint = 0;
pub const CALL_MASTER: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lcore_config {
    pub detected: ::libc::c_uint,
    pub thread_id: ::libc::pthread_t,
    pub pipe_master2slave: [::libc::c_int; 2us],
    pub pipe_slave2master: [::libc::c_int; 2us],
    pub f: *mut lcore_function_t,
    pub arg: *mut ::libc::c_void,
    pub ret: ::libc::c_int,
    pub state: Enum_rte_lcore_state_t,
    pub socket_id: ::libc::c_uint,
    pub core_id: ::libc::c_uint,
    pub core_index: ::libc::c_int,
}
impl ::std::default::Default for Struct_lcore_config {
    fn default() -> Struct_lcore_config { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub locked: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type rte_spinlock_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub sl: rte_spinlock_t,
    pub user: ::libc::c_int,
    pub count: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Struct_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type rte_spinlock_recursive_t = Struct_Unnamed3;
pub enum Struct_malloc_elem { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_malloc_heap {
    pub lock: rte_spinlock_t,
    pub free_head: [Struct_Unnamed4; 5us],
    pub mz_count: ::libc::c_uint,
    pub alloc_count: ::libc::c_uint,
    pub total_size: ::libc::size_t,
}
impl ::std::default::Default for Struct_malloc_heap {
    fn default() -> Struct_malloc_heap { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub lh_first: *mut Struct_malloc_elem,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub cnt: i16,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Struct_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type rte_atomic16_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub cnt: i32,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
pub type rte_atomic32_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub cnt: i64,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
pub type rte_atomic64_t = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub cnt: i32,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Struct_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type rte_rwlock_t = Struct_Unnamed8;
pub type Enum_rte_tailq_t = ::libc::c_uint;
pub const RTE_TAILQ_PCI: ::libc::c_uint = 0;
pub const RTE_TAILQ_MEMPOOL: ::libc::c_uint = 1;
pub const RTE_TAILQ_RING: ::libc::c_uint = 2;
pub const RTE_TAILQ_HASH: ::libc::c_uint = 3;
pub const RTE_TAILQ_FBK_HASH: ::libc::c_uint = 4;
pub const RTE_TAILQ_LPM: ::libc::c_uint = 5;
pub const RTE_TAILQ_LPM6: ::libc::c_uint = 6;
pub const RTE_TAILQ_PM: ::libc::c_uint = 7;
pub const RTE_TAILQ_ACL: ::libc::c_uint = 8;
pub const RTE_TAILQ_DISTRIBUTOR: ::libc::c_uint = 9;
pub const RTE_TAILQ_NUM: ::libc::c_uint = 10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mem_config {
    pub magic: u32,
    pub nchannel: u32,
    pub nrank: u32,
    pub mlock: rte_rwlock_t,
    pub qlock: rte_rwlock_t,
    pub mplock: rte_rwlock_t,
    pub memzone_idx: u32,
    pub memseg: [Struct_rte_memseg; 256us],
    pub memzone: [Struct_rte_memzone; 2560us],
    pub free_memseg: [Struct_rte_memseg; 256us],
    pub tailq_head: [Struct_rte_tailq_head; 32us],
    pub malloc_heaps: [Struct_malloc_heap; 8us],
    pub mem_cfg_addr: u64,
}
impl ::std::default::Default for Struct_rte_mem_config {
    fn default() -> Struct_rte_mem_config { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const RTE_MIN_ERRNO: ::libc::c_uint = 1000;
pub const E_RTE_SECONDARY: ::libc::c_uint = 1001;
pub const E_RTE_NO_CONFIG: ::libc::c_uint = 1002;
pub const E_RTE_NO_TAILQ: ::libc::c_uint = 1003;
pub const RTE_MAX_ERRNO: ::libc::c_uint = 1004;
pub type cpuid_registers_t = [u32; 4us];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_feature_entry {
    pub leaf: u32,
    pub subleaf: u32,
    pub reg: u32,
    pub bit: u32,
    pub name: [::libc::c_char; 64us],
}
impl ::std::default::Default for Struct_feature_entry {
    fn default() -> Struct_feature_entry { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_cpu_flag_t = ::libc::c_int;
pub const RTE_CPUFLAG_SSE3: ::libc::c_int = 0;
pub const RTE_CPUFLAG_PCLMULQDQ: ::libc::c_int = 1;
pub const RTE_CPUFLAG_DTES64: ::libc::c_int = 2;
pub const RTE_CPUFLAG_MONITOR: ::libc::c_int = 3;
pub const RTE_CPUFLAG_DS_CPL: ::libc::c_int = 4;
pub const RTE_CPUFLAG_VMX: ::libc::c_int = 5;
pub const RTE_CPUFLAG_SMX: ::libc::c_int = 6;
pub const RTE_CPUFLAG_EIST: ::libc::c_int = 7;
pub const RTE_CPUFLAG_TM2: ::libc::c_int = 8;
pub const RTE_CPUFLAG_SSSE3: ::libc::c_int = 9;
pub const RTE_CPUFLAG_CNXT_ID: ::libc::c_int = 10;
pub const RTE_CPUFLAG_FMA: ::libc::c_int = 11;
pub const RTE_CPUFLAG_CMPXCHG16B: ::libc::c_int = 12;
pub const RTE_CPUFLAG_XTPR: ::libc::c_int = 13;
pub const RTE_CPUFLAG_PDCM: ::libc::c_int = 14;
pub const RTE_CPUFLAG_PCID: ::libc::c_int = 15;
pub const RTE_CPUFLAG_DCA: ::libc::c_int = 16;
pub const RTE_CPUFLAG_SSE4_1: ::libc::c_int = 17;
pub const RTE_CPUFLAG_SSE4_2: ::libc::c_int = 18;
pub const RTE_CPUFLAG_X2APIC: ::libc::c_int = 19;
pub const RTE_CPUFLAG_MOVBE: ::libc::c_int = 20;
pub const RTE_CPUFLAG_POPCNT: ::libc::c_int = 21;
pub const RTE_CPUFLAG_TSC_DEADLINE: ::libc::c_int = 22;
pub const RTE_CPUFLAG_AES: ::libc::c_int = 23;
pub const RTE_CPUFLAG_XSAVE: ::libc::c_int = 24;
pub const RTE_CPUFLAG_OSXSAVE: ::libc::c_int = 25;
pub const RTE_CPUFLAG_AVX: ::libc::c_int = 26;
pub const RTE_CPUFLAG_F16C: ::libc::c_int = 27;
pub const RTE_CPUFLAG_RDRAND: ::libc::c_int = 28;
pub const RTE_CPUFLAG_FPU: ::libc::c_int = 29;
pub const RTE_CPUFLAG_VME: ::libc::c_int = 30;
pub const RTE_CPUFLAG_DE: ::libc::c_int = 31;
pub const RTE_CPUFLAG_PSE: ::libc::c_int = 32;
pub const RTE_CPUFLAG_TSC: ::libc::c_int = 33;
pub const RTE_CPUFLAG_MSR: ::libc::c_int = 34;
pub const RTE_CPUFLAG_PAE: ::libc::c_int = 35;
pub const RTE_CPUFLAG_MCE: ::libc::c_int = 36;
pub const RTE_CPUFLAG_CX8: ::libc::c_int = 37;
pub const RTE_CPUFLAG_APIC: ::libc::c_int = 38;
pub const RTE_CPUFLAG_SEP: ::libc::c_int = 39;
pub const RTE_CPUFLAG_MTRR: ::libc::c_int = 40;
pub const RTE_CPUFLAG_PGE: ::libc::c_int = 41;
pub const RTE_CPUFLAG_MCA: ::libc::c_int = 42;
pub const RTE_CPUFLAG_CMOV: ::libc::c_int = 43;
pub const RTE_CPUFLAG_PAT: ::libc::c_int = 44;
pub const RTE_CPUFLAG_PSE36: ::libc::c_int = 45;
pub const RTE_CPUFLAG_PSN: ::libc::c_int = 46;
pub const RTE_CPUFLAG_CLFSH: ::libc::c_int = 47;
pub const RTE_CPUFLAG_DS: ::libc::c_int = 48;
pub const RTE_CPUFLAG_ACPI: ::libc::c_int = 49;
pub const RTE_CPUFLAG_MMX: ::libc::c_int = 50;
pub const RTE_CPUFLAG_FXSR: ::libc::c_int = 51;
pub const RTE_CPUFLAG_SSE: ::libc::c_int = 52;
pub const RTE_CPUFLAG_SSE2: ::libc::c_int = 53;
pub const RTE_CPUFLAG_SS: ::libc::c_int = 54;
pub const RTE_CPUFLAG_HTT: ::libc::c_int = 55;
pub const RTE_CPUFLAG_TM: ::libc::c_int = 56;
pub const RTE_CPUFLAG_PBE: ::libc::c_int = 57;
pub const RTE_CPUFLAG_DIGTEMP: ::libc::c_int = 58;
pub const RTE_CPUFLAG_TRBOBST: ::libc::c_int = 59;
pub const RTE_CPUFLAG_ARAT: ::libc::c_int = 60;
pub const RTE_CPUFLAG_PLN: ::libc::c_int = 61;
pub const RTE_CPUFLAG_ECMD: ::libc::c_int = 62;
pub const RTE_CPUFLAG_PTM: ::libc::c_int = 63;
pub const RTE_CPUFLAG_MPERF_APERF_MSR: ::libc::c_int = 64;
pub const RTE_CPUFLAG_ACNT2: ::libc::c_int = 65;
pub const RTE_CPUFLAG_ENERGY_EFF: ::libc::c_int = 66;
pub const RTE_CPUFLAG_FSGSBASE: ::libc::c_int = 67;
pub const RTE_CPUFLAG_BMI1: ::libc::c_int = 68;
pub const RTE_CPUFLAG_HLE: ::libc::c_int = 69;
pub const RTE_CPUFLAG_AVX2: ::libc::c_int = 70;
pub const RTE_CPUFLAG_SMEP: ::libc::c_int = 71;
pub const RTE_CPUFLAG_BMI2: ::libc::c_int = 72;
pub const RTE_CPUFLAG_ERMS: ::libc::c_int = 73;
pub const RTE_CPUFLAG_INVPCID: ::libc::c_int = 74;
pub const RTE_CPUFLAG_RTM: ::libc::c_int = 75;
pub const RTE_CPUFLAG_LAHF_SAHF: ::libc::c_int = 76;
pub const RTE_CPUFLAG_LZCNT: ::libc::c_int = 77;
pub const RTE_CPUFLAG_SYSCALL: ::libc::c_int = 78;
pub const RTE_CPUFLAG_XD: ::libc::c_int = 79;
pub const RTE_CPUFLAG_1GB_PG: ::libc::c_int = 80;
pub const RTE_CPUFLAG_RDTSCP: ::libc::c_int = 81;
pub const RTE_CPUFLAG_EM64T: ::libc::c_int = 82;
pub const RTE_CPUFLAG_INVTSC: ::libc::c_int = 83;
pub const RTE_CPUFLAG_NUMFLAGS: ::libc::c_int = 84;
pub type Enum_cpu_register_t = ::libc::c_int;
pub const REG_EAX: ::libc::c_int = 0;
pub const REG_EBX: ::libc::c_int = 1;
pub const REG_ECX: ::libc::c_int = 2;
pub const REG_EDX: ::libc::c_int = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_acl_field_types {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_rte_acl_field_types {
    pub unsafe fn u8(&mut self) -> *mut u8 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u16(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u32(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u64(&mut self) -> *mut u64 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_rte_acl_field_types {
    fn default() -> Union_rte_acl_field_types {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const RTE_ACL_FIELD_TYPE_MASK: ::libc::c_uint = 0;
pub const RTE_ACL_FIELD_TYPE_RANGE: ::libc::c_uint = 1;
pub const RTE_ACL_FIELD_TYPE_BITMASK: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_field_def {
    pub _type: u8,
    pub size: u8,
    pub field_index: u8,
    pub input_index: u8,
    pub offset: u32,
}
impl ::std::default::Default for Struct_rte_acl_field_def {
    fn default() -> Struct_rte_acl_field_def {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_config {
    pub num_categories: u32,
    pub num_fields: u32,
    pub defs: [Struct_rte_acl_field_def; 64us],
}
impl ::std::default::Default for Struct_rte_acl_config {
    fn default() -> Struct_rte_acl_config { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_field {
    pub value: Union_rte_acl_field_types,
    pub mask_range: Union_rte_acl_field_types,
}
impl ::std::default::Default for Struct_rte_acl_field {
    fn default() -> Struct_rte_acl_field { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const RTE_ACL_TYPE_SHIFT: ::libc::c_uint = 29;
pub const RTE_ACL_MAX_INDEX: ::libc::c_uint = 536870911;
pub const RTE_ACL_MAX_PRIORITY: ::libc::c_uint = 536870911;
pub const RTE_ACL_MIN_PRIORITY: ::libc::c_uint = 0;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_rule_data {
    pub category_mask: u32,
    pub priority: i32,
    pub userdata: u32,
}
impl ::std::default::Default for Struct_rte_acl_rule_data {
    fn default() -> Struct_rte_acl_rule_data {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_rule {
    pub data: Struct_rte_acl_rule_data,
    pub field: [Struct_rte_acl_field; 0us],
}
impl ::std::default::Default for Struct_rte_acl_rule {
    fn default() -> Struct_rte_acl_rule { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_param {
    pub name: *const ::libc::c_char,
    pub socket_id: ::libc::c_int,
    pub rule_size: u32,
    pub max_rule_num: u32,
}
impl ::std::default::Default for Struct_rte_acl_param {
    fn default() -> Struct_rte_acl_param { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_acl_ctx { }
pub type Enum_rte_acl_classify_alg = ::libc::c_uint;
pub const RTE_ACL_CLASSIFY_DEFAULT: ::libc::c_uint = 0;
pub const RTE_ACL_CLASSIFY_SCALAR: ::libc::c_uint = 1;
pub const RTE_ACL_CLASSIFY_SSE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_acl_ipv4vlan_rule {
    pub data: Struct_rte_acl_rule_data,
    pub proto: u8,
    pub proto_mask: u8,
    pub vlan: u16,
    pub vlan_mask: u16,
    pub domain: u16,
    pub domain_mask: u16,
    pub src_addr: u32,
    pub src_mask_len: u32,
    pub dst_addr: u32,
    pub dst_mask_len: u32,
    pub src_port_low: u16,
    pub src_port_high: u16,
    pub dst_port_low: u16,
    pub dst_port_high: u16,
}
impl ::std::default::Default for Struct_rte_acl_ipv4vlan_rule {
    fn default() -> Struct_rte_acl_ipv4vlan_rule {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const RTE_ACL_IPV4VLAN_PROTO_FIELD: ::libc::c_uint = 0;
pub const RTE_ACL_IPV4VLAN_VLAN1_FIELD: ::libc::c_uint = 1;
pub const RTE_ACL_IPV4VLAN_VLAN2_FIELD: ::libc::c_uint = 2;
pub const RTE_ACL_IPV4VLAN_SRC_FIELD: ::libc::c_uint = 3;
pub const RTE_ACL_IPV4VLAN_DST_FIELD: ::libc::c_uint = 4;
pub const RTE_ACL_IPV4VLAN_SRCP_FIELD: ::libc::c_uint = 5;
pub const RTE_ACL_IPV4VLAN_DSTP_FIELD: ::libc::c_uint = 6;
pub const RTE_ACL_IPV4VLAN_NUM_FIELDS: ::libc::c_uint = 7;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const RTE_ACL_IPV4VLAN_PROTO: ::libc::c_uint = 0;
pub const RTE_ACL_IPV4VLAN_VLAN: ::libc::c_uint = 1;
pub const RTE_ACL_IPV4VLAN_SRC: ::libc::c_uint = 2;
pub const RTE_ACL_IPV4VLAN_DST: ::libc::c_uint = 3;
pub const RTE_ACL_IPV4VLAN_PORTS: ::libc::c_uint = 4;
pub const RTE_ACL_IPV4VLAN_NUM: ::libc::c_uint = 5;
pub type rte_eal_alarm_callback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_arp_ipv4 {
    pub arp_sha: [u8; 6us],
    pub arp_sip: [u8; 4us],
    pub arp_tha: [u8; 6us],
    pub arp_tip: [u8; 4us],
}
impl ::std::default::Default for Struct_arp_ipv4 {
    fn default() -> Struct_arp_ipv4 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_arp_hdr {
    pub arp_hrd: u16,
    pub arp_pro: u16,
    pub arp_hln: u8,
    pub arp_pln: u8,
    pub arp_op: u16,
    pub arp_data: Union_Unnamed14,
}
impl ::std::default::Default for Struct_arp_hdr {
    fn default() -> Struct_arp_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u8; 20us],
}
impl Union_Unnamed14 {
    pub unsafe fn arp_ip(&mut self) -> *mut Struct_arp_ipv4 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Union_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_bitmap {
    pub array1: *mut u64,
    pub array2: *mut u64,
    pub array1_size: u32,
    pub array2_size: u32,
    pub index1: u32,
    pub offset1: u32,
    pub index2: u32,
    pub go2: u32,
    pub memory: [u8; 0us],
}
impl ::std::default::Default for Struct_rte_bitmap {
    fn default() -> Struct_rte_bitmap { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_cfgfile { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_cfgfile_entry {
    pub name: [::libc::c_char; 32us],
    pub value: [::libc::c_char; 64us],
}
impl ::std::default::Default for Struct_rte_cfgfile_entry {
    fn default() -> Struct_rte_cfgfile_entry {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_timer_source = ::libc::c_uint;
pub const EAL_TIMER_TSC: ::libc::c_uint = 0;
pub const EAL_TIMER_HPET: ::libc::c_uint = 1;
pub type rte_intr_callback_fn =
    ::std::option::Option<extern "C" fn
                              (intr_handle: *mut Struct_rte_intr_handle,
                               cb_arg: *mut ::libc::c_void) -> ()>;
pub type Enum_rte_intr_handle_type = ::libc::c_uint;
pub const RTE_INTR_HANDLE_UNKNOWN: ::libc::c_uint = 0;
pub const RTE_INTR_HANDLE_UIO: ::libc::c_uint = 1;
pub const RTE_INTR_HANDLE_VFIO_LEGACY: ::libc::c_uint = 2;
pub const RTE_INTR_HANDLE_VFIO_MSI: ::libc::c_uint = 3;
pub const RTE_INTR_HANDLE_VFIO_MSIX: ::libc::c_uint = 4;
pub const RTE_INTR_HANDLE_ALARM: ::libc::c_uint = 5;
pub const RTE_INTR_HANDLE_MAX: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_intr_handle {
    pub vfio_dev_fd: ::libc::c_int,
    pub fd: ::libc::c_int,
    pub _type: Enum_rte_intr_handle_type,
}
impl ::std::default::Default for Struct_rte_intr_handle {
    fn default() -> Struct_rte_intr_handle { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pci_device_list {
    pub tqh_first: *mut Struct_rte_pci_device,
    pub tqh_last: *mut *mut Struct_rte_pci_device,
}
impl ::std::default::Default for Struct_pci_device_list {
    fn default() -> Struct_pci_device_list { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pci_driver_list {
    pub tqh_first: *mut Struct_rte_pci_driver,
    pub tqh_last: *mut *mut Struct_rte_pci_driver,
}
impl ::std::default::Default for Struct_pci_driver_list {
    fn default() -> Struct_pci_driver_list { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_resource {
    pub phys_addr: u64,
    pub len: u64,
    pub addr: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_rte_pci_resource {
    fn default() -> Struct_rte_pci_resource {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_id {
    pub vendor_id: u16,
    pub device_id: u16,
    pub subsystem_vendor_id: u16,
    pub subsystem_device_id: u16,
}
impl ::std::default::Default for Struct_rte_pci_id {
    fn default() -> Struct_rte_pci_id { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_addr {
    pub domain: u16,
    pub bus: u8,
    pub devid: u8,
    pub function: u8,
}
impl ::std::default::Default for Struct_rte_pci_addr {
    fn default() -> Struct_rte_pci_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_device {
    pub next: Struct_Unnamed15,
    pub addr: Struct_rte_pci_addr,
    pub id: Struct_rte_pci_id,
    pub mem_resource: [Struct_rte_pci_resource; 7us],
    pub intr_handle: Struct_rte_intr_handle,
    pub driver: *const Struct_rte_pci_driver,
    pub max_vfs: u16,
    pub numa_node: ::libc::c_int,
    pub devargs: *mut Struct_rte_devargs,
}
impl ::std::default::Default for Struct_rte_pci_device {
    fn default() -> Struct_rte_pci_device { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub tqe_next: *mut Struct_rte_pci_device,
    pub tqe_prev: *mut *mut Struct_rte_pci_device,
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Struct_Unnamed15 { unsafe { ::std::mem::zeroed() } }
}
pub type pci_devinit_t =
    extern "C" fn
        (arg1: *mut Struct_rte_pci_driver, arg2: *mut Struct_rte_pci_device)
        -> ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_driver {
    pub next: Struct_Unnamed16,
    pub name: *const ::libc::c_char,
    pub devinit: *mut pci_devinit_t,
    pub id_table: *mut Struct_rte_pci_id,
    pub drv_flags: u32,
}
impl ::std::default::Default for Struct_rte_pci_driver {
    fn default() -> Struct_rte_pci_driver { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub tqe_next: *mut Struct_rte_pci_driver,
    pub tqe_prev: *mut *mut Struct_rte_pci_driver,
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Struct_Unnamed16 { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_devtype = ::libc::c_uint;
pub const RTE_DEVTYPE_WHITELISTED_PCI: ::libc::c_uint = 0;
pub const RTE_DEVTYPE_BLACKLISTED_PCI: ::libc::c_uint = 1;
pub const RTE_DEVTYPE_VIRTUAL: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_devargs {
    pub next: Struct_Unnamed17,
    pub _type: Enum_rte_devtype,
    pub _bindgen_data_1_: [u16; 16us],
    pub args: [::libc::c_char; 256us],
}
impl Struct_rte_devargs {
    pub unsafe fn pci(&mut self) -> *mut Struct_Unnamed18 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn _virtual(&mut self) -> *mut Struct_Unnamed19 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_rte_devargs {
    fn default() -> Struct_rte_devargs { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub tqe_next: *mut Struct_rte_devargs,
    pub tqe_prev: *mut *mut Struct_rte_devargs,
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Struct_Unnamed17 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub addr: Struct_rte_pci_addr,
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Struct_Unnamed18 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub drv_name: [::libc::c_char; 32us],
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Struct_Unnamed19 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_devargs_list {
    pub tqh_first: *mut Struct_rte_devargs,
    pub tqh_last: *mut *mut Struct_rte_devargs,
}
impl ::std::default::Default for Struct_rte_devargs_list {
    fn default() -> Struct_rte_devargs_list {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_driver_list {
    pub tqh_first: *mut Struct_rte_driver,
    pub tqh_last: *mut *mut Struct_rte_driver,
}
impl ::std::default::Default for Struct_rte_driver_list {
    fn default() -> Struct_rte_driver_list { unsafe { ::std::mem::zeroed() } }
}
pub type rte_dev_init_t =
    extern "C" fn(name: *const ::libc::c_char, args: *const ::libc::c_char)
        -> ::libc::c_int;
pub type Enum_pmd_type = ::libc::c_uint;
pub const PMD_VDEV: ::libc::c_uint = 0;
pub const PMD_PDEV: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_driver {
    pub next: Struct_Unnamed20,
    pub _type: Enum_pmd_type,
    pub name: *const ::libc::c_char,
    pub init: *mut rte_dev_init_t,
}
impl ::std::default::Default for Struct_rte_driver {
    fn default() -> Struct_rte_driver { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub tqe_next: *mut Struct_rte_driver,
    pub tqe_prev: *mut *mut Struct_rte_driver,
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Struct_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_ring_queue_behavior = ::libc::c_uint;
pub const RTE_RING_QUEUE_FIXED: ::libc::c_uint = 0;
pub const RTE_RING_QUEUE_VARIABLE: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_ring {
    pub name: [::libc::c_char; 32us],
    pub flags: ::libc::c_int,
    pub prod: Struct_prod,
    pub cons: Struct_cons,
    pub ring: [*mut ::libc::c_void; 0us],
}
impl ::std::default::Default for Struct_rte_ring {
    fn default() -> Struct_rte_ring { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_prod {
    pub watermark: u32,
    pub sp_enqueue: u32,
    pub size: u32,
    pub mask: u32,
    pub head: u32,
    pub tail: u32,
}
impl ::std::default::Default for Struct_prod {
    fn default() -> Struct_prod { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cons {
    pub sc_dequeue: u32,
    pub size: u32,
    pub mask: u32,
    pub head: u32,
    pub tail: u32,
}
impl ::std::default::Default for Struct_cons {
    fn default() -> Struct_cons { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool_cache {
    pub len: ::libc::c_uint,
    pub objs: [*mut ::libc::c_void; 1536us],
}
impl ::std::default::Default for Struct_rte_mempool_cache {
    fn default() -> Struct_rte_mempool_cache {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool_objsz {
    pub elt_size: u32,
    pub header_size: u32,
    pub trailer_size: u32,
    pub total_size: u32,
}
impl ::std::default::Default for Struct_rte_mempool_objsz {
    fn default() -> Struct_rte_mempool_objsz {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool {
    pub name: [::libc::c_char; 32us],
    pub ring: *mut Struct_rte_ring,
    pub phys_addr: phys_addr_t,
    pub flags: ::libc::c_int,
    pub size: u32,
    pub cache_size: u32,
    pub cache_flushthresh: u32,
    pub elt_size: u32,
    pub header_size: u32,
    pub trailer_size: u32,
    pub private_data_size: ::libc::c_uint,
    pub local_cache: [Struct_rte_mempool_cache; 128us],
    pub pg_num: u32,
    pub pg_shift: u32,
    pub pg_mask: ::libc::size_t,
    pub elt_va_start: ::libc::size_t,
    pub elt_va_end: ::libc::size_t,
    pub elt_pa: [phys_addr_t; 1us],
}
impl ::std::default::Default for Struct_rte_mempool {
    fn default() -> Struct_rte_mempool { unsafe { ::std::mem::zeroed() } }
}
pub type rte_mempool_obj_iter_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void,
                               arg2: *mut ::libc::c_void,
                               arg3: *mut ::libc::c_void, arg4: u32)
                              -> ()>;
pub type rte_mempool_obj_ctor_t =
    extern "C" fn
        (arg1: *mut Struct_rte_mempool, arg2: *mut ::libc::c_void,
         arg3: *mut ::libc::c_void, arg4: ::libc::c_uint) -> ();
pub type rte_mempool_ctor_t =
    extern "C" fn(arg1: *mut Struct_rte_mempool, arg2: *mut ::libc::c_void)
        -> ();
pub type MARKER = [*mut ::libc::c_void; 0us];
pub type MARKER8 = [u8; 0us];
pub type MARKER64 = [u64; 0us];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mbuf {
    pub cacheline0: MARKER,
    pub buf_addr: *mut ::libc::c_void,
    pub buf_physaddr: phys_addr_t,
    pub buf_len: u16,
    pub rearm_data: MARKER8,
    pub data_off: u16,
    pub _bindgen_data_1_: [u16; 1us],
    pub nb_segs: u8,
    pub port: u8,
    pub ol_flags: u64,
    pub rx_descriptor_fields1: MARKER,
    pub packet_type: u16,
    pub data_len: u16,
    pub pkt_len: u32,
    pub vlan_tci: u16,
    pub reserved: u16,
    pub hash: Union_Unnamed21,
    pub cacheline1: MARKER,
    pub _bindgen_data_2_: [u64; 1us],
    pub pool: *mut Struct_rte_mempool,
    pub next: *mut Struct_rte_mbuf,
    pub _bindgen_data_3_: [u64; 1us],
}
impl Struct_rte_mbuf {
    pub unsafe fn refcnt_atomic(&mut self) -> *mut rte_atomic16_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn refcnt(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn refcnt_reserved(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn userdata(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_2_)
    }
    pub unsafe fn udata64(&mut self) -> *mut u64 {
        ::std::mem::transmute(&self._bindgen_data_2_)
    }
    pub unsafe fn tx_offload(&mut self) -> *mut u64 {
        ::std::mem::transmute(&self._bindgen_data_3_)
    }
}
impl ::std::default::Default for Struct_rte_mbuf {
    fn default() -> Struct_rte_mbuf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed21 {
    pub _bindgen_data_: [u32; 2us],
}
impl Union_Unnamed21 {
    pub unsafe fn rss(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn fdir(&mut self) -> *mut Struct_Unnamed22 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sched(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn usr(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed21 {
    fn default() -> Union_Unnamed21 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub _bindgen_data_1_: [u32; 1us],
    pub hi: u32,
}
impl Struct_Unnamed22 {
    pub unsafe fn hash(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn id(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn lo(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Struct_Unnamed22 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pktmbuf_pool_private {
    pub mbuf_data_room_size: u16,
}
impl ::std::default::Default for Struct_rte_pktmbuf_pool_private {
    fn default() -> Struct_rte_pktmbuf_pool_private {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_rte_distributor { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ether_addr {
    pub addr_bytes: [u8; 6us],
}
impl ::std::default::Default for Struct_ether_addr {
    fn default() -> Struct_ether_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ether_hdr {
    pub d_addr: Struct_ether_addr,
    pub s_addr: Struct_ether_addr,
    pub ether_type: u16,
}
impl ::std::default::Default for Struct_ether_hdr {
    fn default() -> Struct_ether_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vlan_hdr {
    pub vlan_tci: u16,
    pub eth_proto: u16,
}
impl ::std::default::Default for Struct_vlan_hdr {
    fn default() -> Struct_vlan_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vxlan_hdr {
    pub vx_flags: u32,
    pub vx_vni: u32,
}
impl ::std::default::Default for Struct_vxlan_hdr {
    fn default() -> Struct_vxlan_hdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_bond_8023ad_selection = ::libc::c_uint;
pub const UNSELECTED: ::libc::c_uint = 0;
pub const STANDBY: ::libc::c_uint = 1;
pub const SELECTED: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_slow_protocol {
    pub subtype: u8,
    pub reserved_119: [u8; 119us],
}
impl ::std::default::Default for Struct_slow_protocol {
    fn default() -> Struct_slow_protocol { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_slow_protocol_frame {
    pub eth_hdr: Struct_ether_hdr,
    pub slow_protocol: Struct_slow_protocol,
}
impl ::std::default::Default for Struct_slow_protocol_frame {
    fn default() -> Struct_slow_protocol_frame {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_port_params {
    pub system_priority: u16,
    pub system: Struct_ether_addr,
    pub key: u16,
    pub port_priority: u16,
    pub port_number: u16,
}
impl ::std::default::Default for Struct_port_params {
    fn default() -> Struct_port_params { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lacpdu_actor_partner_params {
    pub tlv_type_info: u8,
    pub info_length: u8,
    pub port_params: Struct_port_params,
    pub state: u8,
    pub reserved_3: [u8; 3us],
}
impl ::std::default::Default for Struct_lacpdu_actor_partner_params {
    fn default() -> Struct_lacpdu_actor_partner_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lacpdu {
    pub subtype: u8,
    pub version_number: u8,
    pub actor: Struct_lacpdu_actor_partner_params,
    pub partner: Struct_lacpdu_actor_partner_params,
    pub tlv_type_collector_info: u8,
    pub collector_info_length: u8,
    pub collector_max_delay: u16,
    pub reserved_12: [u8; 12us],
    pub tlv_type_terminator: u8,
    pub terminator_length: u8,
    pub reserved_50: [u8; 50us],
}
impl ::std::default::Default for Struct_lacpdu {
    fn default() -> Struct_lacpdu { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lacpdu_header {
    pub eth_hdr: Struct_ether_hdr,
    pub lacpdu: Struct_lacpdu,
}
impl ::std::default::Default for Struct_lacpdu_header {
    fn default() -> Struct_lacpdu_header { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marker {
    pub subtype: u8,
    pub version_number: u8,
    pub tlv_type_marker: u8,
    pub info_length: u8,
    pub requester_port: u16,
    pub requester_system: Struct_ether_addr,
    pub requester_transaction_id: u32,
    pub reserved_2: [u8; 2us],
    pub tlv_type_terminator: u8,
    pub terminator_length: u8,
    pub reserved_90: [u8; 90us],
}
impl ::std::default::Default for Struct_marker {
    fn default() -> Struct_marker { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marker_header {
    pub eth_hdr: Struct_ether_hdr,
    pub marker: Struct_marker,
}
impl ::std::default::Default for Struct_marker_header {
    fn default() -> Struct_marker_header { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_bond_8023ad_conf {
    pub fast_periodic_ms: u32,
    pub slow_periodic_ms: u32,
    pub short_timeout_ms: u32,
    pub long_timeout_ms: u32,
    pub aggregate_wait_timeout_ms: u32,
    pub tx_period_ms: u32,
    pub rx_marker_period_ms: u32,
    pub update_timeout_ms: u32,
}
impl ::std::default::Default for Struct_rte_eth_bond_8023ad_conf {
    fn default() -> Struct_rte_eth_bond_8023ad_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_bond_8023ad_slave_info {
    pub selected: Enum_rte_bond_8023ad_selection,
    pub actor_state: u8,
    pub actor: Struct_port_params,
    pub partner_state: u8,
    pub partner: Struct_port_params,
    pub agg_port_id: u8,
}
impl ::std::default::Default for Struct_rte_eth_bond_8023ad_slave_info {
    fn default() -> Struct_rte_eth_bond_8023ad_slave_info {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_filter_type = ::libc::c_uint;
pub const RTE_ETH_FILTER_NONE: ::libc::c_uint = 0;
pub const RTE_ETH_FILTER_MACVLAN: ::libc::c_uint = 1;
pub const RTE_ETH_FILTER_ETHERTYPE: ::libc::c_uint = 2;
pub const RTE_ETH_FILTER_TUNNEL: ::libc::c_uint = 3;
pub const RTE_ETH_FILTER_FDIR: ::libc::c_uint = 4;
pub const RTE_ETH_FILTER_MAX: ::libc::c_uint = 5;
pub type Enum_rte_filter_op = ::libc::c_uint;
pub const RTE_ETH_FILTER_NOP: ::libc::c_uint = 0;
pub const RTE_ETH_FILTER_ADD: ::libc::c_uint = 1;
pub const RTE_ETH_FILTER_UPDATE: ::libc::c_uint = 2;
pub const RTE_ETH_FILTER_DELETE: ::libc::c_uint = 3;
pub const RTE_ETH_FILTER_FLUSH: ::libc::c_uint = 4;
pub const RTE_ETH_FILTER_GET: ::libc::c_uint = 5;
pub const RTE_ETH_FILTER_SET: ::libc::c_uint = 6;
pub const RTE_ETH_FILTER_INFO: ::libc::c_uint = 7;
pub const RTE_ETH_FILTER_STATS: ::libc::c_uint = 8;
pub const RTE_ETH_FILTER_OP_MAX: ::libc::c_uint = 9;
pub type Enum_rte_mac_filter_type = ::libc::c_uint;
pub const RTE_MAC_PERFECT_MATCH: ::libc::c_uint = 1;
pub const RTE_MACVLAN_PERFECT_MATCH: ::libc::c_uint = 2;
pub const RTE_MAC_HASH_MATCH: ::libc::c_uint = 3;
pub const RTE_MACVLAN_HASH_MATCH: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_mac_filter {
    pub is_vf: u8,
    pub dst_id: u16,
    pub filter_type: Enum_rte_mac_filter_type,
    pub mac_addr: Struct_ether_addr,
}
impl ::std::default::Default for Struct_rte_eth_mac_filter {
    fn default() -> Struct_rte_eth_mac_filter {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ethertype_filter {
    pub mac_addr: Struct_ether_addr,
    pub ether_type: u16,
    pub flags: u16,
    pub queue: u16,
}
impl ::std::default::Default for Struct_rte_eth_ethertype_filter {
    fn default() -> Struct_rte_eth_ethertype_filter {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_eth_tunnel_type = ::libc::c_uint;
pub const RTE_TUNNEL_TYPE_NONE: ::libc::c_uint = 0;
pub const RTE_TUNNEL_TYPE_VXLAN: ::libc::c_uint = 1;
pub const RTE_TUNNEL_TYPE_GENEVE: ::libc::c_uint = 2;
pub const RTE_TUNNEL_TYPE_TEREDO: ::libc::c_uint = 3;
pub const RTE_TUNNEL_TYPE_NVGRE: ::libc::c_uint = 4;
pub const RTE_TUNNEL_TYPE_MAX: ::libc::c_uint = 5;
pub type Enum_rte_tunnel_iptype = ::libc::c_uint;
pub const RTE_TUNNEL_IPTYPE_IPV4: ::libc::c_uint = 0;
pub const RTE_TUNNEL_IPTYPE_IPV6: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tunnel_filter_conf {
    pub outer_mac: *mut Struct_ether_addr,
    pub inner_mac: *mut Struct_ether_addr,
    pub inner_vlan: u16,
    pub ip_type: Enum_rte_tunnel_iptype,
    pub ip_addr: Union_Unnamed23,
    pub filter_type: u16,
    pub tunnel_type: Enum_rte_eth_tunnel_type,
    pub tenant_id: u32,
    pub queue_id: u16,
}
impl ::std::default::Default for Struct_rte_eth_tunnel_filter_conf {
    fn default() -> Struct_rte_eth_tunnel_filter_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed23 {
    pub _bindgen_data_: [u32; 4us],
}
impl Union_Unnamed23 {
    pub unsafe fn ipv4_addr(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn ipv6_addr(&mut self) -> *mut [u32; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed23 {
    fn default() -> Union_Unnamed23 { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_eth_flow_type = ::libc::c_uint;
pub const RTE_ETH_FLOW_TYPE_NONE: ::libc::c_uint = 0;
pub const RTE_ETH_FLOW_TYPE_UDPV4: ::libc::c_uint = 1;
pub const RTE_ETH_FLOW_TYPE_TCPV4: ::libc::c_uint = 2;
pub const RTE_ETH_FLOW_TYPE_SCTPV4: ::libc::c_uint = 3;
pub const RTE_ETH_FLOW_TYPE_IPV4_OTHER: ::libc::c_uint = 4;
pub const RTE_ETH_FLOW_TYPE_FRAG_IPV4: ::libc::c_uint = 5;
pub const RTE_ETH_FLOW_TYPE_UDPV6: ::libc::c_uint = 6;
pub const RTE_ETH_FLOW_TYPE_TCPV6: ::libc::c_uint = 7;
pub const RTE_ETH_FLOW_TYPE_SCTPV6: ::libc::c_uint = 8;
pub const RTE_ETH_FLOW_TYPE_IPV6_OTHER: ::libc::c_uint = 9;
pub const RTE_ETH_FLOW_TYPE_FRAG_IPV6: ::libc::c_uint = 10;
pub const RTE_ETH_FLOW_TYPE_MAX: ::libc::c_uint = 64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ipv4_flow {
    pub src_ip: u32,
    pub dst_ip: u32,
}
impl ::std::default::Default for Struct_rte_eth_ipv4_flow {
    fn default() -> Struct_rte_eth_ipv4_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_udpv4_flow {
    pub ip: Struct_rte_eth_ipv4_flow,
    pub src_port: u16,
    pub dst_port: u16,
}
impl ::std::default::Default for Struct_rte_eth_udpv4_flow {
    fn default() -> Struct_rte_eth_udpv4_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tcpv4_flow {
    pub ip: Struct_rte_eth_ipv4_flow,
    pub src_port: u16,
    pub dst_port: u16,
}
impl ::std::default::Default for Struct_rte_eth_tcpv4_flow {
    fn default() -> Struct_rte_eth_tcpv4_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_sctpv4_flow {
    pub ip: Struct_rte_eth_ipv4_flow,
    pub verify_tag: u32,
}
impl ::std::default::Default for Struct_rte_eth_sctpv4_flow {
    fn default() -> Struct_rte_eth_sctpv4_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ipv6_flow {
    pub src_ip: [u32; 4us],
    pub dst_ip: [u32; 4us],
}
impl ::std::default::Default for Struct_rte_eth_ipv6_flow {
    fn default() -> Struct_rte_eth_ipv6_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_udpv6_flow {
    pub ip: Struct_rte_eth_ipv6_flow,
    pub src_port: u16,
    pub dst_port: u16,
}
impl ::std::default::Default for Struct_rte_eth_udpv6_flow {
    fn default() -> Struct_rte_eth_udpv6_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tcpv6_flow {
    pub ip: Struct_rte_eth_ipv6_flow,
    pub src_port: u16,
    pub dst_port: u16,
}
impl ::std::default::Default for Struct_rte_eth_tcpv6_flow {
    fn default() -> Struct_rte_eth_tcpv6_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_sctpv6_flow {
    pub ip: Struct_rte_eth_ipv6_flow,
    pub verify_tag: u32,
}
impl ::std::default::Default for Struct_rte_eth_sctpv6_flow {
    fn default() -> Struct_rte_eth_sctpv6_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_eth_fdir_flow {
    pub _bindgen_data_: [u32; 9us],
}
impl Union_rte_eth_fdir_flow {
    pub unsafe fn udp4_flow(&mut self) -> *mut Struct_rte_eth_udpv4_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn tcp4_flow(&mut self) -> *mut Struct_rte_eth_tcpv4_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sctp4_flow(&mut self) -> *mut Struct_rte_eth_sctpv4_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn ip4_flow(&mut self) -> *mut Struct_rte_eth_ipv4_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn udp6_flow(&mut self) -> *mut Struct_rte_eth_udpv6_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn tcp6_flow(&mut self) -> *mut Struct_rte_eth_tcpv6_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sctp6_flow(&mut self) -> *mut Struct_rte_eth_sctpv6_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn ipv6_flow(&mut self) -> *mut Struct_rte_eth_ipv6_flow {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_rte_eth_fdir_flow {
    fn default() -> Union_rte_eth_fdir_flow {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_flow_ext {
    pub vlan_tci: u16,
    pub flexbytes: [u8; 16us],
}
impl ::std::default::Default for Struct_rte_eth_fdir_flow_ext {
    fn default() -> Struct_rte_eth_fdir_flow_ext {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_input {
    pub flow_type: Enum_rte_eth_flow_type,
    pub flow: Union_rte_eth_fdir_flow,
    pub flow_ext: Struct_rte_eth_fdir_flow_ext,
}
impl ::std::default::Default for Struct_rte_eth_fdir_input {
    fn default() -> Struct_rte_eth_fdir_input {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_eth_fdir_behavior = ::libc::c_uint;
pub const RTE_ETH_FDIR_ACCEPT: ::libc::c_uint = 0;
pub const RTE_ETH_FDIR_REJECT: ::libc::c_uint = 1;
pub type Enum_rte_eth_fdir_status = ::libc::c_uint;
pub const RTE_ETH_FDIR_NO_REPORT_STATUS: ::libc::c_uint = 0;
pub const RTE_ETH_FDIR_REPORT_ID: ::libc::c_uint = 1;
pub const RTE_ETH_FDIR_REPORT_ID_FLEX_4: ::libc::c_uint = 2;
pub const RTE_ETH_FDIR_REPORT_FLEX_8: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_action {
    pub rx_queue: u16,
    pub behavior: Enum_rte_eth_fdir_behavior,
    pub report_status: Enum_rte_eth_fdir_status,
    pub flex_off: u8,
}
impl ::std::default::Default for Struct_rte_eth_fdir_action {
    fn default() -> Struct_rte_eth_fdir_action {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_filter {
    pub soft_id: u32,
    pub input: Struct_rte_eth_fdir_input,
    pub action: Struct_rte_eth_fdir_action,
}
impl ::std::default::Default for Struct_rte_eth_fdir_filter {
    fn default() -> Struct_rte_eth_fdir_filter {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_eth_payload_type = ::libc::c_uint;
pub const RTE_ETH_PAYLOAD_UNKNOWN: ::libc::c_uint = 0;
pub const RTE_ETH_L2_PAYLOAD: ::libc::c_uint = 1;
pub const RTE_ETH_L3_PAYLOAD: ::libc::c_uint = 2;
pub const RTE_ETH_L4_PAYLOAD: ::libc::c_uint = 3;
pub const RTE_ETH_PAYLOAD_MAX: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_flex_payload_cfg {
    pub _type: Enum_rte_eth_payload_type,
    pub src_offset: [u16; 16us],
}
impl ::std::default::Default for Struct_rte_eth_flex_payload_cfg {
    fn default() -> Struct_rte_eth_flex_payload_cfg {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_flex_mask {
    pub flow_type: Enum_rte_eth_flow_type,
    pub mask: [u8; 16us],
}
impl ::std::default::Default for Struct_rte_eth_fdir_flex_mask {
    fn default() -> Struct_rte_eth_fdir_flex_mask {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_flex_conf {
    pub nb_payloads: u16,
    pub nb_flexmasks: u16,
    pub flex_set: [Struct_rte_eth_flex_payload_cfg; 8us],
    pub flex_mask: [Struct_rte_eth_fdir_flex_mask; 64us],
}
impl ::std::default::Default for Struct_rte_eth_fdir_flex_conf {
    fn default() -> Struct_rte_eth_fdir_flex_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_fdir_mode = ::libc::c_uint;
pub const RTE_FDIR_MODE_NONE: ::libc::c_uint = 0;
pub const RTE_FDIR_MODE_SIGNATURE: ::libc::c_uint = 1;
pub const RTE_FDIR_MODE_PERFECT: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_info {
    pub mode: Enum_rte_fdir_mode,
    pub flex_conf: Struct_rte_eth_fdir_flex_conf,
    pub guarant_spc: u32,
    pub best_spc: u32,
    pub flow_types_mask: [u32; 16us],
    pub max_flexpayload: u32,
    pub flex_payload_unit: u32,
    pub max_flex_payload_segment_num: u32,
    pub flex_payload_limit: u16,
    pub flex_bitmask_unit: u32,
    pub max_flex_bitmask_num: u32,
}
impl ::std::default::Default for Struct_rte_eth_fdir_info {
    fn default() -> Struct_rte_eth_fdir_info {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_stats {
    pub collision: u32,
    pub free: u32,
    pub maxhash: u32,
    pub maxlen: u32,
    pub add: u64,
    pub remove: u64,
    pub f_add: u64,
    pub f_remove: u64,
    pub guarant_cnt: u32,
    pub best_cnt: u32,
}
impl ::std::default::Default for Struct_rte_eth_fdir_stats {
    fn default() -> Struct_rte_eth_fdir_stats {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_stats {
    pub ipackets: u64,
    pub opackets: u64,
    pub ibytes: u64,
    pub obytes: u64,
    pub imissed: u64,
    pub ibadcrc: u64,
    pub ibadlen: u64,
    pub ierrors: u64,
    pub oerrors: u64,
    pub imcasts: u64,
    pub rx_nombuf: u64,
    pub fdirmatch: u64,
    pub fdirmiss: u64,
    pub tx_pause_xon: u64,
    pub rx_pause_xon: u64,
    pub tx_pause_xoff: u64,
    pub rx_pause_xoff: u64,
    pub q_ipackets: [u64; 16us],
    pub q_opackets: [u64; 16us],
    pub q_ibytes: [u64; 16us],
    pub q_obytes: [u64; 16us],
    pub q_errors: [u64; 16us],
    pub ilbpackets: u64,
    pub olbpackets: u64,
    pub ilbbytes: u64,
    pub olbbytes: u64,
}
impl ::std::default::Default for Struct_rte_eth_stats {
    fn default() -> Struct_rte_eth_stats { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_link {
    pub link_speed: u16,
    pub link_duplex: u16,
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::default::Default for Struct_rte_eth_link {
    fn default() -> Struct_rte_eth_link { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_thresh {
    pub pthresh: u8,
    pub hthresh: u8,
    pub wthresh: u8,
}
impl ::std::default::Default for Struct_rte_eth_thresh {
    fn default() -> Struct_rte_eth_thresh { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_eth_rx_mq_mode = ::libc::c_uint;
pub const ETH_MQ_RX_NONE: ::libc::c_uint = 0;
pub const ETH_MQ_RX_RSS: ::libc::c_uint = 1;
pub const ETH_MQ_RX_DCB: ::libc::c_uint = 2;
pub const ETH_MQ_RX_DCB_RSS: ::libc::c_uint = 3;
pub const ETH_MQ_RX_VMDQ_ONLY: ::libc::c_uint = 4;
pub const ETH_MQ_RX_VMDQ_RSS: ::libc::c_uint = 5;
pub const ETH_MQ_RX_VMDQ_DCB: ::libc::c_uint = 6;
pub const ETH_MQ_RX_VMDQ_DCB_RSS: ::libc::c_uint = 7;
pub type Enum_rte_eth_tx_mq_mode = ::libc::c_uint;
pub const ETH_MQ_TX_NONE: ::libc::c_uint = 0;
pub const ETH_MQ_TX_DCB: ::libc::c_uint = 1;
pub const ETH_MQ_TX_VMDQ_DCB: ::libc::c_uint = 2;
pub const ETH_MQ_TX_VMDQ_ONLY: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rxmode {
    pub mq_mode: Enum_rte_eth_rx_mq_mode,
    pub max_rx_pkt_len: u32,
    pub split_hdr_size: u16,
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
    pub _bindgen_bitfield_3_: u8,
    pub _bindgen_bitfield_4_: u8,
    pub _bindgen_bitfield_5_: u8,
    pub _bindgen_bitfield_6_: u8,
    pub _bindgen_bitfield_7_: u8,
    pub _bindgen_bitfield_8_: u8,
}
impl ::std::default::Default for Struct_rte_eth_rxmode {
    fn default() -> Struct_rte_eth_rxmode { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rss_conf {
    pub rss_key: *mut u8,
    pub rss_key_len: u8,
    pub rss_hf: u64,
}
impl ::std::default::Default for Struct_rte_eth_rss_conf {
    fn default() -> Struct_rte_eth_rss_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vlan_mirror {
    pub vlan_mask: u64,
    pub vlan_id: [u16; 64us],
}
impl ::std::default::Default for Struct_rte_eth_vlan_mirror {
    fn default() -> Struct_rte_eth_vlan_mirror {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_mirror_conf {
    pub rule_type_mask: u8,
    pub dst_pool: u8,
    pub pool_mask: u64,
    pub vlan: Struct_rte_eth_vlan_mirror,
}
impl ::std::default::Default for Struct_rte_eth_vmdq_mirror_conf {
    fn default() -> Struct_rte_eth_vmdq_mirror_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rss_reta_entry64 {
    pub mask: u64,
    pub reta: [u8; 64us],
}
impl ::std::default::Default for Struct_rte_eth_rss_reta_entry64 {
    fn default() -> Struct_rte_eth_rss_reta_entry64 {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_eth_nb_tcs = ::libc::c_uint;
pub const ETH_4_TCS: ::libc::c_uint = 4;
pub const ETH_8_TCS: ::libc::c_uint = 8;
pub type Enum_rte_eth_nb_pools = ::libc::c_uint;
pub const ETH_8_POOLS: ::libc::c_uint = 8;
pub const ETH_16_POOLS: ::libc::c_uint = 16;
pub const ETH_32_POOLS: ::libc::c_uint = 32;
pub const ETH_64_POOLS: ::libc::c_uint = 64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dcb_rx_conf {
    pub nb_tcs: Enum_rte_eth_nb_tcs,
    pub dcb_queue: [u8; 8us],
}
impl ::std::default::Default for Struct_rte_eth_dcb_rx_conf {
    fn default() -> Struct_rte_eth_dcb_rx_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_dcb_tx_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
    pub dcb_queue: [u8; 8us],
}
impl ::std::default::Default for Struct_rte_eth_vmdq_dcb_tx_conf {
    fn default() -> Struct_rte_eth_vmdq_dcb_tx_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dcb_tx_conf {
    pub nb_tcs: Enum_rte_eth_nb_tcs,
    pub dcb_queue: [u8; 8us],
}
impl ::std::default::Default for Struct_rte_eth_dcb_tx_conf {
    fn default() -> Struct_rte_eth_dcb_tx_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_tx_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
}
impl ::std::default::Default for Struct_rte_eth_vmdq_tx_conf {
    fn default() -> Struct_rte_eth_vmdq_tx_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_dcb_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
    pub enable_default_pool: u8,
    pub default_pool: u8,
    pub nb_pool_maps: u8,
    pub pool_map: [Struct_Unnamed24; 64us],
    pub dcb_queue: [u8; 8us],
}
impl ::std::default::Default for Struct_rte_eth_vmdq_dcb_conf {
    fn default() -> Struct_rte_eth_vmdq_dcb_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub vlan_id: u16,
    pub pools: u64,
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Struct_Unnamed24 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_rx_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
    pub enable_default_pool: u8,
    pub default_pool: u8,
    pub enable_loop_back: u8,
    pub nb_pool_maps: u8,
    pub rx_mode: u32,
    pub pool_map: [Struct_Unnamed25; 64us],
}
impl ::std::default::Default for Struct_rte_eth_vmdq_rx_conf {
    fn default() -> Struct_rte_eth_vmdq_rx_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub vlan_id: u16,
    pub pools: u64,
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Struct_Unnamed25 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_txmode {
    pub mq_mode: Enum_rte_eth_tx_mq_mode,
    pub pvid: u16,
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
    pub _bindgen_bitfield_3_: u8,
}
impl ::std::default::Default for Struct_rte_eth_txmode {
    fn default() -> Struct_rte_eth_txmode { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rxconf {
    pub rx_thresh: Struct_rte_eth_thresh,
    pub rx_free_thresh: u16,
    pub rx_drop_en: u8,
    pub rx_deferred_start: u8,
}
impl ::std::default::Default for Struct_rte_eth_rxconf {
    fn default() -> Struct_rte_eth_rxconf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_txconf {
    pub tx_thresh: Struct_rte_eth_thresh,
    pub tx_rs_thresh: u16,
    pub tx_free_thresh: u16,
    pub txq_flags: u32,
    pub tx_deferred_start: u8,
}
impl ::std::default::Default for Struct_rte_eth_txconf {
    fn default() -> Struct_rte_eth_txconf { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_eth_fc_mode = ::libc::c_uint;
pub const RTE_FC_NONE: ::libc::c_uint = 0;
pub const RTE_FC_RX_PAUSE: ::libc::c_uint = 1;
pub const RTE_FC_TX_PAUSE: ::libc::c_uint = 2;
pub const RTE_FC_FULL: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fc_conf {
    pub high_water: u32,
    pub low_water: u32,
    pub pause_time: u16,
    pub send_xon: u16,
    pub mode: Enum_rte_eth_fc_mode,
    pub mac_ctrl_frame_fwd: u8,
    pub autoneg: u8,
}
impl ::std::default::Default for Struct_rte_eth_fc_conf {
    fn default() -> Struct_rte_eth_fc_conf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_pfc_conf {
    pub fc: Struct_rte_eth_fc_conf,
    pub priority: u8,
}
impl ::std::default::Default for Struct_rte_eth_pfc_conf {
    fn default() -> Struct_rte_eth_pfc_conf {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_fdir_pballoc_type = ::libc::c_uint;
pub const RTE_FDIR_PBALLOC_64K: ::libc::c_uint = 0;
pub const RTE_FDIR_PBALLOC_128K: ::libc::c_uint = 1;
pub const RTE_FDIR_PBALLOC_256K: ::libc::c_uint = 2;
pub type Enum_rte_fdir_status_mode = ::libc::c_uint;
pub const RTE_FDIR_NO_REPORT_STATUS: ::libc::c_uint = 0;
pub const RTE_FDIR_REPORT_STATUS: ::libc::c_uint = 1;
pub const RTE_FDIR_REPORT_STATUS_ALWAYS: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_fdir_conf {
    pub mode: Enum_rte_fdir_mode,
    pub pballoc: Enum_rte_fdir_pballoc_type,
    pub status: Enum_rte_fdir_status_mode,
    pub flexbytes_offset: u8,
    pub drop_queue: u8,
    pub flex_conf: Struct_rte_eth_fdir_flex_conf,
}
impl ::std::default::Default for Struct_rte_fdir_conf {
    fn default() -> Struct_rte_fdir_conf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_udp_tunnel {
    pub udp_port: u16,
    pub prot_type: u8,
}
impl ::std::default::Default for Struct_rte_eth_udp_tunnel {
    fn default() -> Struct_rte_eth_udp_tunnel {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_l4type = ::libc::c_uint;
pub const RTE_FDIR_L4TYPE_NONE: ::libc::c_uint = 0;
pub const RTE_FDIR_L4TYPE_UDP: ::libc::c_uint = 1;
pub const RTE_FDIR_L4TYPE_TCP: ::libc::c_uint = 2;
pub const RTE_FDIR_L4TYPE_SCTP: ::libc::c_uint = 3;
pub type Enum_rte_iptype = ::libc::c_uint;
pub const RTE_FDIR_IPTYPE_IPV4: ::libc::c_uint = 0;
pub const RTE_FDIR_IPTYPE_IPV6: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_fdir_filter {
    pub flex_bytes: u16,
    pub vlan_id: u16,
    pub port_src: u16,
    pub port_dst: u16,
    pub ip_src: Union_Unnamed26,
    pub ip_dst: Union_Unnamed27,
    pub l4type: Enum_rte_l4type,
    pub iptype: Enum_rte_iptype,
}
impl ::std::default::Default for Struct_rte_fdir_filter {
    fn default() -> Struct_rte_fdir_filter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u32; 4us],
}
impl Union_Unnamed26 {
    pub unsafe fn ipv4_addr(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn ipv6_addr(&mut self) -> *mut [u32; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed26 {
    fn default() -> Union_Unnamed26 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u32; 4us],
}
impl Union_Unnamed27 {
    pub unsafe fn ipv4_addr(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn ipv6_addr(&mut self) -> *mut [u32; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed27 {
    fn default() -> Union_Unnamed27 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_fdir_masks {
    pub only_ip_flow: u8,
    pub vlan_id: u8,
    pub vlan_prio: u8,
    pub flexbytes: u8,
    pub set_ipv6_mask: u8,
    pub comp_ipv6_dst: u8,
    pub dst_ipv4_mask: u32,
    pub src_ipv4_mask: u32,
    pub dst_ipv6_mask: u16,
    pub src_ipv6_mask: u16,
    pub src_port_mask: u16,
    pub dst_port_mask: u16,
}
impl ::std::default::Default for Struct_rte_fdir_masks {
    fn default() -> Struct_rte_fdir_masks { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir {
    pub collision: u16,
    pub free: u16,
    pub maxhash: u16,
    pub maxlen: u8,
    pub add: u64,
    pub remove: u64,
    pub f_add: u64,
    pub f_remove: u64,
}
impl ::std::default::Default for Struct_rte_eth_fdir {
    fn default() -> Struct_rte_eth_fdir { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_intr_conf {
    pub lsc: u16,
}
impl ::std::default::Default for Struct_rte_intr_conf {
    fn default() -> Struct_rte_intr_conf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_conf {
    pub link_speed: u16,
    pub link_duplex: u16,
    pub rxmode: Struct_rte_eth_rxmode,
    pub txmode: Struct_rte_eth_txmode,
    pub lpbk_mode: u32,
    pub rx_adv_conf: Struct_Unnamed28,
    pub tx_adv_conf: Union_Unnamed29,
    pub dcb_capability_en: u32,
    pub fdir_conf: Struct_rte_fdir_conf,
    pub intr_conf: Struct_rte_intr_conf,
}
impl ::std::default::Default for Struct_rte_eth_conf {
    fn default() -> Struct_rte_eth_conf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub rss_conf: Struct_rte_eth_rss_conf,
    pub vmdq_dcb_conf: Struct_rte_eth_vmdq_dcb_conf,
    pub dcb_rx_conf: Struct_rte_eth_dcb_rx_conf,
    pub vmdq_rx_conf: Struct_rte_eth_vmdq_rx_conf,
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Struct_Unnamed28 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed29 {
    pub _bindgen_data_: [u32; 3us],
}
impl Union_Unnamed29 {
    pub unsafe fn vmdq_dcb_tx_conf(&mut self)
     -> *mut Struct_rte_eth_vmdq_dcb_tx_conf {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn dcb_tx_conf(&mut self) -> *mut Struct_rte_eth_dcb_tx_conf {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn vmdq_tx_conf(&mut self)
     -> *mut Struct_rte_eth_vmdq_tx_conf {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed29 {
    fn default() -> Union_Unnamed29 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_info {
    pub pci_dev: *mut Struct_rte_pci_device,
    pub driver_name: *const ::libc::c_char,
    pub if_index: ::libc::c_uint,
    pub min_rx_bufsize: u32,
    pub max_rx_pktlen: u32,
    pub max_rx_queues: u16,
    pub max_tx_queues: u16,
    pub max_mac_addrs: u32,
    pub max_hash_mac_addrs: u32,
    pub max_vfs: u16,
    pub max_vmdq_pools: u16,
    pub rx_offload_capa: u32,
    pub tx_offload_capa: u32,
    pub reta_size: u16,
    pub default_rxconf: Struct_rte_eth_rxconf,
    pub default_txconf: Struct_rte_eth_txconf,
    pub vmdq_queue_base: u16,
    pub vmdq_queue_num: u16,
    pub vmdq_pool_base: u16,
}
impl ::std::default::Default for Struct_rte_eth_dev_info {
    fn default() -> Struct_rte_eth_dev_info {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_xstats {
    pub name: [::libc::c_char; 64us],
    pub value: u64,
}
impl ::std::default::Default for Struct_rte_eth_xstats {
    fn default() -> Struct_rte_eth_xstats { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_eth_dev_callback { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_cb_list {
    pub tqh_first: *mut Struct_rte_eth_dev_callback,
    pub tqh_last: *mut *mut Struct_rte_eth_dev_callback,
}
impl ::std::default::Default for Struct_rte_eth_dev_cb_list {
    fn default() -> Struct_rte_eth_dev_cb_list {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_ethertype_filter {
    pub ethertype: u16,
    pub priority_en: u8,
    pub priority: u8,
}
impl ::std::default::Default for Struct_rte_ethertype_filter {
    fn default() -> Struct_rte_ethertype_filter {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_syn_filter {
    pub hig_pri: u8,
}
impl ::std::default::Default for Struct_rte_syn_filter {
    fn default() -> Struct_rte_syn_filter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_2tuple_filter {
    pub dst_port: u16,
    pub protocol: u8,
    pub tcp_flags: u8,
    pub priority: u16,
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
}
impl ::std::default::Default for Struct_rte_2tuple_filter {
    fn default() -> Struct_rte_2tuple_filter {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_flex_filter {
    pub len: u16,
    pub dwords: [u32; 32us],
    pub mask: [u8; 16us],
    pub priority: u8,
}
impl ::std::default::Default for Struct_rte_flex_filter {
    fn default() -> Struct_rte_flex_filter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_5tuple_filter {
    pub dst_ip: u32,
    pub src_ip: u32,
    pub dst_port: u16,
    pub src_port: u16,
    pub protocol: u8,
    pub tcp_flags: u8,
    pub priority: u16,
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
    pub _bindgen_bitfield_3_: u8,
    pub _bindgen_bitfield_4_: u8,
    pub _bindgen_bitfield_5_: u8,
}
impl ::std::default::Default for Struct_rte_5tuple_filter {
    fn default() -> Struct_rte_5tuple_filter {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type eth_dev_configure_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_dev_start_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_dev_stop_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_dev_set_link_up_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_dev_set_link_down_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_dev_close_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_promiscuous_enable_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_promiscuous_disable_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_allmulticast_enable_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_allmulticast_disable_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_link_update_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               wait_to_complete: ::libc::c_int)
                              -> ::libc::c_int>;
pub type eth_stats_get_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               igb_stats: *mut Struct_rte_eth_stats) -> ()>;
pub type eth_stats_reset_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_xstats_get_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               stats: *mut Struct_rte_eth_xstats,
                               n: ::libc::c_uint) -> ::libc::c_int>;
pub type eth_xstats_reset_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev) -> ()>;
pub type eth_queue_stats_mapping_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               queue_id: u16, stat_idx: u8,
                               is_rx: u8) -> ::libc::c_int>;
pub type eth_dev_infos_get_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               dev_info: *mut Struct_rte_eth_dev_info) -> ()>;
pub type eth_queue_start_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               queue_id: u16) -> ::libc::c_int>;
pub type eth_queue_stop_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               queue_id: u16) -> ::libc::c_int>;
pub type eth_rx_queue_setup_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               rx_queue_id: u16, nb_rx_desc: u16,
                               socket_id: ::libc::c_uint,
                               rx_conf: *const Struct_rte_eth_rxconf,
                               mb_pool: *mut Struct_rte_mempool)
                              -> ::libc::c_int>;
pub type eth_tx_queue_setup_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               tx_queue_id: u16, nb_tx_desc: u16,
                               socket_id: ::libc::c_uint,
                               tx_conf: *const Struct_rte_eth_txconf)
                              -> ::libc::c_int>;
pub type eth_queue_release_t =
    ::std::option::Option<extern "C" fn(queue: *mut ::libc::c_void) -> ()>;
pub type eth_rx_queue_count_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               rx_queue_id: u16) -> u32>;
pub type eth_rx_descriptor_done_t =
    ::std::option::Option<extern "C" fn
                              (rxq: *mut ::libc::c_void, offset: u16)
                              -> ::libc::c_int>;
pub type mtu_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, mtu: u16)
                              -> ::libc::c_int>;
pub type vlan_filter_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               vlan_id: u16, on: ::libc::c_int)
                              -> ::libc::c_int>;
pub type vlan_tpid_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, tpid: u16)
                              -> ()>;
pub type vlan_offload_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               mask: ::libc::c_int) -> ()>;
pub type vlan_pvid_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               vlan_id: u16, on: ::libc::c_int)
                              -> ::libc::c_int>;
pub type vlan_strip_queue_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               rx_queue_id: u16, on: ::libc::c_int)
                              -> ()>;
pub type eth_rx_burst_t =
    ::std::option::Option<extern "C" fn
                              (rxq: *mut ::libc::c_void,
                               rx_pkts: *mut *mut Struct_rte_mbuf,
                               nb_pkts: u16) -> u16>;
pub type eth_tx_burst_t =
    ::std::option::Option<extern "C" fn
                              (txq: *mut ::libc::c_void,
                               tx_pkts: *mut *mut Struct_rte_mbuf,
                               nb_pkts: u16) -> u16>;
pub type fdir_add_signature_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_ftr: *mut Struct_rte_fdir_filter,
                               rx_queue: u8) -> ::libc::c_int>;
pub type fdir_update_signature_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_ftr: *mut Struct_rte_fdir_filter,
                               rx_queue: u8) -> ::libc::c_int>;
pub type fdir_remove_signature_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_ftr: *mut Struct_rte_fdir_filter)
                              -> ::libc::c_int>;
pub type fdir_infos_get_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir: *mut Struct_rte_eth_fdir) -> ()>;
pub type fdir_add_perfect_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_ftr: *mut Struct_rte_fdir_filter,
                               soft_id: u16, rx_queue: u8,
                               drop: u8) -> ::libc::c_int>;
pub type fdir_update_perfect_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_ftr: *mut Struct_rte_fdir_filter,
                               soft_id: u16, rx_queue: u8,
                               drop: u8) -> ::libc::c_int>;
pub type fdir_remove_perfect_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_ftr: *mut Struct_rte_fdir_filter,
                               soft_id: u16) -> ::libc::c_int>;
pub type fdir_set_masks_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fdir_masks: *mut Struct_rte_fdir_masks)
                              -> ::libc::c_int>;
pub type flow_ctrl_get_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fc_conf: *mut Struct_rte_eth_fc_conf)
                              -> ::libc::c_int>;
pub type flow_ctrl_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               fc_conf: *mut Struct_rte_eth_fc_conf)
                              -> ::libc::c_int>;
pub type priority_flow_ctrl_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               pfc_conf: *mut Struct_rte_eth_pfc_conf)
                              -> ::libc::c_int>;
pub type reta_update_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               reta_conf:
                                   *mut Struct_rte_eth_rss_reta_entry64,
                               reta_size: u16) -> ::libc::c_int>;
pub type reta_query_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               reta_conf:
                                   *mut Struct_rte_eth_rss_reta_entry64,
                               reta_size: u16) -> ::libc::c_int>;
pub type rss_hash_update_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               rss_conf: *mut Struct_rte_eth_rss_conf)
                              -> ::libc::c_int>;
pub type rss_hash_conf_get_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               rss_conf: *mut Struct_rte_eth_rss_conf)
                              -> ::libc::c_int>;
pub type eth_dev_led_on_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_dev_led_off_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_mac_addr_remove_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u32)
                              -> ()>;
pub type eth_mac_addr_add_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               mac_addr: *mut Struct_ether_addr,
                               index: u32, vmdq: u32) -> ()>;
pub type eth_uc_hash_table_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               mac_addr: *mut Struct_ether_addr, on: u8)
                              -> ::libc::c_int>;
pub type eth_uc_all_hash_table_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, on: u8)
                              -> ::libc::c_int>;
pub type eth_set_vf_rx_mode_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, vf: u16,
                               rx_mode: u16, on: u8)
                              -> ::libc::c_int>;
pub type eth_set_vf_rx_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, vf: u16,
                               on: u8) -> ::libc::c_int>;
pub type eth_set_vf_tx_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, vf: u16,
                               on: u8) -> ::libc::c_int>;
pub type eth_set_vf_vlan_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, vlan: u16,
                               vf_mask: u64, vlan_on: u8)
                              -> ::libc::c_int>;
pub type eth_set_queue_rate_limit_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               queue_idx: u16, tx_rate: u16)
                              -> ::libc::c_int>;
pub type eth_set_vf_rate_limit_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, vf: u16,
                               tx_rate: u16, q_msk: u64)
                              -> ::libc::c_int>;
pub type eth_mirror_rule_set_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               mirror_conf:
                                   *mut Struct_rte_eth_vmdq_mirror_conf,
                               rule_id: u8, on: u8)
                              -> ::libc::c_int>;
pub type eth_mirror_rule_reset_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, rule_id: u8)
                              -> ::libc::c_int>;
pub type eth_udp_tunnel_add_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               tunnel_udp: *mut Struct_rte_eth_udp_tunnel)
                              -> ::libc::c_int>;
pub type eth_udp_tunnel_del_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               tunnel_udp: *mut Struct_rte_eth_udp_tunnel)
                              -> ::libc::c_int>;
pub type eth_add_syn_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               filter: *mut Struct_rte_syn_filter,
                               rx_queue: u16) -> ::libc::c_int>;
pub type eth_remove_syn_filter_t =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
pub type eth_get_syn_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               filter: *mut Struct_rte_syn_filter,
                               rx_queue: *mut u16) -> ::libc::c_int>;
pub type eth_add_ethertype_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_ethertype_filter,
                               rx_queue: u16) -> ::libc::c_int>;
pub type eth_remove_ethertype_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16)
                              -> ::libc::c_int>;
pub type eth_get_ethertype_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_ethertype_filter,
                               rx_queue: *mut u16) -> ::libc::c_int>;
pub type eth_add_2tuple_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_2tuple_filter,
                               rx_queue: u16) -> ::libc::c_int>;
pub type eth_remove_2tuple_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16)
                              -> ::libc::c_int>;
pub type eth_get_2tuple_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_2tuple_filter,
                               rx_queue: *mut u16) -> ::libc::c_int>;
pub type eth_add_5tuple_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_5tuple_filter,
                               rx_queue: u16) -> ::libc::c_int>;
pub type eth_remove_5tuple_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16)
                              -> ::libc::c_int>;
pub type eth_get_5tuple_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_5tuple_filter,
                               rx_queue: *mut u16) -> ::libc::c_int>;
pub type eth_add_flex_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_flex_filter,
                               rx_queue: u16) -> ::libc::c_int>;
pub type eth_remove_flex_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16)
                              -> ::libc::c_int>;
pub type eth_get_flex_filter_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev, index: u16,
                               filter: *mut Struct_rte_flex_filter,
                               rx_queue: *mut u16) -> ::libc::c_int>;
pub type eth_filter_ctrl_t =
    ::std::option::Option<extern "C" fn
                              (dev: *mut Struct_rte_eth_dev,
                               filter_type: Enum_rte_filter_type,
                               filter_op: Enum_rte_filter_op,
                               arg: *mut ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_eth_dev_ops {
    pub dev_configure: eth_dev_configure_t,
    pub dev_start: eth_dev_start_t,
    pub dev_stop: eth_dev_stop_t,
    pub dev_set_link_up: eth_dev_set_link_up_t,
    pub dev_set_link_down: eth_dev_set_link_down_t,
    pub dev_close: eth_dev_close_t,
    pub promiscuous_enable: eth_promiscuous_enable_t,
    pub promiscuous_disable: eth_promiscuous_disable_t,
    pub allmulticast_enable: eth_allmulticast_enable_t,
    pub allmulticast_disable: eth_allmulticast_disable_t,
    pub link_update: eth_link_update_t,
    pub stats_get: eth_stats_get_t,
    pub stats_reset: eth_stats_reset_t,
    pub xstats_get: eth_xstats_get_t,
    pub xstats_reset: eth_xstats_reset_t,
    pub queue_stats_mapping_set: eth_queue_stats_mapping_set_t,
    pub dev_infos_get: eth_dev_infos_get_t,
    pub mtu_set: mtu_set_t,
    pub vlan_filter_set: vlan_filter_set_t,
    pub vlan_tpid_set: vlan_tpid_set_t,
    pub vlan_strip_queue_set: vlan_strip_queue_set_t,
    pub vlan_offload_set: vlan_offload_set_t,
    pub vlan_pvid_set: vlan_pvid_set_t,
    pub rx_queue_start: eth_queue_start_t,
    pub rx_queue_stop: eth_queue_stop_t,
    pub tx_queue_start: eth_queue_start_t,
    pub tx_queue_stop: eth_queue_stop_t,
    pub rx_queue_setup: eth_rx_queue_setup_t,
    pub rx_queue_release: eth_queue_release_t,
    pub rx_queue_count: eth_rx_queue_count_t,
    pub rx_descriptor_done: eth_rx_descriptor_done_t,
    pub tx_queue_setup: eth_tx_queue_setup_t,
    pub tx_queue_release: eth_queue_release_t,
    pub dev_led_on: eth_dev_led_on_t,
    pub dev_led_off: eth_dev_led_off_t,
    pub flow_ctrl_get: flow_ctrl_get_t,
    pub flow_ctrl_set: flow_ctrl_set_t,
    pub priority_flow_ctrl_set: priority_flow_ctrl_set_t,
    pub mac_addr_remove: eth_mac_addr_remove_t,
    pub mac_addr_add: eth_mac_addr_add_t,
    pub uc_hash_table_set: eth_uc_hash_table_set_t,
    pub uc_all_hash_table_set: eth_uc_all_hash_table_set_t,
    pub mirror_rule_set: eth_mirror_rule_set_t,
    pub mirror_rule_reset: eth_mirror_rule_reset_t,
    pub set_vf_rx_mode: eth_set_vf_rx_mode_t,
    pub set_vf_rx: eth_set_vf_rx_t,
    pub set_vf_tx: eth_set_vf_tx_t,
    pub set_vf_vlan_filter: eth_set_vf_vlan_filter_t,
    pub udp_tunnel_add: eth_udp_tunnel_add_t,
    pub udp_tunnel_del: eth_udp_tunnel_del_t,
    pub set_queue_rate_limit: eth_set_queue_rate_limit_t,
    pub set_vf_rate_limit: eth_set_vf_rate_limit_t,
    pub fdir_add_signature_filter: fdir_add_signature_filter_t,
    pub fdir_update_signature_filter: fdir_update_signature_filter_t,
    pub fdir_remove_signature_filter: fdir_remove_signature_filter_t,
    pub fdir_infos_get: fdir_infos_get_t,
    pub fdir_add_perfect_filter: fdir_add_perfect_filter_t,
    pub fdir_update_perfect_filter: fdir_update_perfect_filter_t,
    pub fdir_remove_perfect_filter: fdir_remove_perfect_filter_t,
    pub fdir_set_masks: fdir_set_masks_t,
    pub reta_update: reta_update_t,
    pub reta_query: reta_query_t,
    pub rss_hash_update: rss_hash_update_t,
    pub rss_hash_conf_get: rss_hash_conf_get_t,
    pub add_syn_filter: eth_add_syn_filter_t,
    pub remove_syn_filter: eth_remove_syn_filter_t,
    pub get_syn_filter: eth_get_syn_filter_t,
    pub add_ethertype_filter: eth_add_ethertype_filter_t,
    pub remove_ethertype_filter: eth_remove_ethertype_filter_t,
    pub get_ethertype_filter: eth_get_ethertype_filter_t,
    pub add_2tuple_filter: eth_add_2tuple_filter_t,
    pub remove_2tuple_filter: eth_remove_2tuple_filter_t,
    pub get_2tuple_filter: eth_get_2tuple_filter_t,
    pub add_5tuple_filter: eth_add_5tuple_filter_t,
    pub remove_5tuple_filter: eth_remove_5tuple_filter_t,
    pub get_5tuple_filter: eth_get_5tuple_filter_t,
    pub add_flex_filter: eth_add_flex_filter_t,
    pub remove_flex_filter: eth_remove_flex_filter_t,
    pub get_flex_filter: eth_get_flex_filter_t,
    pub filter_ctrl: eth_filter_ctrl_t,
}
impl ::std::default::Default for Struct_eth_dev_ops {
    fn default() -> Struct_eth_dev_ops { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev {
    pub rx_pkt_burst: eth_rx_burst_t,
    pub tx_pkt_burst: eth_tx_burst_t,
    pub data: *mut Struct_rte_eth_dev_data,
    pub driver: *const Struct_eth_driver,
    pub dev_ops: *mut Struct_eth_dev_ops,
    pub pci_dev: *mut Struct_rte_pci_device,
    pub callbacks: Struct_rte_eth_dev_cb_list,
}
impl ::std::default::Default for Struct_rte_eth_dev {
    fn default() -> Struct_rte_eth_dev { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_sriov {
    pub active: u8,
    pub nb_q_per_pool: u8,
    pub def_vmdq_idx: u16,
    pub def_pool_q_idx: u16,
}
impl ::std::default::Default for Struct_rte_eth_dev_sriov {
    fn default() -> Struct_rte_eth_dev_sriov {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_data {
    pub name: [::libc::c_char; 32us],
    pub rx_queues: *mut *mut ::libc::c_void,
    pub tx_queues: *mut *mut ::libc::c_void,
    pub nb_rx_queues: u16,
    pub nb_tx_queues: u16,
    pub sriov: Struct_rte_eth_dev_sriov,
    pub dev_private: *mut ::libc::c_void,
    pub dev_link: Struct_rte_eth_link,
    pub dev_conf: Struct_rte_eth_conf,
    pub mtu: u16,
    pub min_rx_buf_size: u32,
    pub rx_mbuf_alloc_failed: u64,
    pub mac_addrs: *mut Struct_ether_addr,
    pub mac_pool_sel: [u64; 128us],
    pub hash_mac_addrs: *mut Struct_ether_addr,
    pub port_id: u8,
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
    pub _bindgen_bitfield_3_: u8,
    pub _bindgen_bitfield_4_: u8,
}
impl ::std::default::Default for Struct_rte_eth_dev_data {
    fn default() -> Struct_rte_eth_dev_data {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type eth_dev_init_t =
    ::std::option::Option<extern "C" fn
                              (eth_drv: *mut Struct_eth_driver,
                               eth_dev: *mut Struct_rte_eth_dev)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_eth_driver {
    pub pci_drv: Struct_rte_pci_driver,
    pub eth_dev_init: eth_dev_init_t,
    pub dev_private_size: ::libc::c_uint,
}
impl ::std::default::Default for Struct_eth_driver {
    fn default() -> Struct_eth_driver { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_eth_event_type = ::libc::c_uint;
pub const RTE_ETH_EVENT_UNKNOWN: ::libc::c_uint = 0;
pub const RTE_ETH_EVENT_INTR_LSC: ::libc::c_uint = 1;
pub const RTE_ETH_EVENT_MAX: ::libc::c_uint = 2;
pub type rte_eth_dev_cb_fn =
    ::std::option::Option<extern "C" fn
                              (port_id: u8,
                               event: Enum_rte_eth_event_type,
                               cb_arg: *mut ::libc::c_void) -> ()>;
pub type rte_fbk_hash_fn =
    ::std::option::Option<extern "C" fn(key: u32, init_val: u32)
                              -> u32>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_fbk_hash_params {
    pub name: *const ::libc::c_char,
    pub entries: u32,
    pub entries_per_bucket: u32,
    pub socket_id: ::libc::c_int,
    pub hash_func: rte_fbk_hash_fn,
    pub init_val: u32,
}
impl ::std::default::Default for Struct_rte_fbk_hash_params {
    fn default() -> Struct_rte_fbk_hash_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_fbk_hash_entry {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_rte_fbk_hash_entry {
    pub unsafe fn whole_entry(&mut self) -> *mut u64 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn entry(&mut self) -> *mut Struct_Unnamed30 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_rte_fbk_hash_entry {
    fn default() -> Union_rte_fbk_hash_entry {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub is_entry: u16,
    pub value: u16,
    pub key: u32,
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Struct_Unnamed30 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_fbk_hash_table {
    pub name: [::libc::c_char; 32us],
    pub entries: u32,
    pub entries_per_bucket: u32,
    pub used_entries: u32,
    pub bucket_mask: u32,
    pub bucket_shift: u32,
    pub hash_func: rte_fbk_hash_fn,
    pub init_val: u32,
    pub t: [Union_rte_fbk_hash_entry; 0us],
}
impl ::std::default::Default for Struct_rte_fbk_hash_table {
    fn default() -> Struct_rte_fbk_hash_table {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type hash_sig_t = u32;
pub type rte_hash_function =
    ::std::option::Option<extern "C" fn
                              (key: *const ::libc::c_void, key_len: u32,
                               init_val: u32) -> u32>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_hash_parameters {
    pub name: *const ::libc::c_char,
    pub entries: u32,
    pub bucket_entries: u32,
    pub key_len: u32,
    pub hash_func: rte_hash_function,
    pub hash_func_init_val: u32,
    pub socket_id: ::libc::c_int,
}
impl ::std::default::Default for Struct_rte_hash_parameters {
    fn default() -> Struct_rte_hash_parameters {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_hash {
    pub name: [::libc::c_char; 32us],
    pub entries: u32,
    pub bucket_entries: u32,
    pub key_len: u32,
    pub hash_func: rte_hash_function,
    pub hash_func_init_val: u32,
    pub num_buckets: u32,
    pub bucket_bitmask: u32,
    pub sig_msb: hash_sig_t,
    pub sig_tbl: *mut u8,
    pub sig_tbl_bucket_size: u32,
    pub key_tbl: *mut u8,
    pub key_tbl_key_size: u32,
}
impl ::std::default::Default for Struct_rte_hash {
    fn default() -> Struct_rte_hash { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_icmp_hdr {
    pub icmp_type: u8,
    pub icmp_code: u8,
    pub icmp_cksum: u16,
    pub icmp_ident: u16,
    pub icmp_seq_nb: u16,
}
impl ::std::default::Default for Struct_icmp_hdr {
    fn default() -> Struct_icmp_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv4_hdr {
    pub version_ihl: u8,
    pub type_of_service: u8,
    pub total_length: u16,
    pub packet_id: u16,
    pub fragment_offset: u16,
    pub time_to_live: u8,
    pub next_proto_id: u8,
    pub hdr_checksum: u16,
    pub src_addr: u32,
    pub dst_addr: u32,
}
impl ::std::default::Default for Struct_ipv4_hdr {
    fn default() -> Struct_ipv4_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_hdr {
    pub vtc_flow: u32,
    pub payload_len: u16,
    pub proto: u8,
    pub hop_limits: u8,
    pub src_addr: [u8; 16us],
    pub dst_addr: [u8; 16us],
}
impl ::std::default::Default for Struct_ipv6_hdr {
    fn default() -> Struct_ipv6_hdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const IP_LAST_FRAG_IDX: ::libc::c_uint = 0;
pub const IP_FIRST_FRAG_IDX: ::libc::c_uint = 1;
pub const IP_MIN_FRAG_NUM: ::libc::c_uint = 2;
pub const IP_MAX_FRAG_NUM: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_frag {
    pub ofs: u16,
    pub len: u16,
    pub mb: *mut Struct_rte_mbuf,
}
impl ::std::default::Default for Struct_ip_frag {
    fn default() -> Struct_ip_frag { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_frag_key {
    pub src_dst: [u64; 4us],
    pub id: u32,
    pub key_len: u32,
}
impl ::std::default::Default for Struct_ip_frag_key {
    fn default() -> Struct_ip_frag_key { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_frag_pkt {
    pub lru: Struct_Unnamed32,
    pub key: Struct_ip_frag_key,
    pub start: u64,
    pub total_size: u32,
    pub frag_size: u32,
    pub last_idx: u32,
    pub frags: [Struct_ip_frag; 4us],
}
impl ::std::default::Default for Struct_ip_frag_pkt {
    fn default() -> Struct_ip_frag_pkt { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub tqe_next: *mut Struct_ip_frag_pkt,
    pub tqe_prev: *mut *mut Struct_ip_frag_pkt,
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Struct_Unnamed32 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_ip_frag_death_row {
    pub cnt: u32,
    pub row: [*mut Struct_rte_mbuf; 160us],
}
impl ::std::default::Default for Struct_rte_ip_frag_death_row {
    fn default() -> Struct_rte_ip_frag_death_row {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_pkt_list {
    pub tqh_first: *mut Struct_ip_frag_pkt,
    pub tqh_last: *mut *mut Struct_ip_frag_pkt,
}
impl ::std::default::Default for Struct_ip_pkt_list {
    fn default() -> Struct_ip_pkt_list { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_frag_tbl_stat {
    pub find_num: u64,
    pub add_num: u64,
    pub del_num: u64,
    pub reuse_num: u64,
    pub fail_total: u64,
    pub fail_nospace: u64,
}
impl ::std::default::Default for Struct_ip_frag_tbl_stat {
    fn default() -> Struct_ip_frag_tbl_stat {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_ip_frag_tbl {
    pub max_cycles: u64,
    pub entry_mask: u32,
    pub max_entries: u32,
    pub use_entries: u32,
    pub bucket_entries: u32,
    pub nb_entries: u32,
    pub nb_buckets: u32,
    pub last: *mut Struct_ip_frag_pkt,
    pub lru: Struct_ip_pkt_list,
    pub stat: Struct_ip_frag_tbl_stat,
    pub pkt: [Struct_ip_frag_pkt; 0us],
}
impl ::std::default::Default for Struct_rte_ip_frag_tbl {
    fn default() -> Struct_rte_ip_frag_tbl { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_extension_fragment {
    pub next_header: u8,
    pub reserved1: u8,
    pub _bindgen_data_1_: [u16; 1us],
    pub id: u32,
}
impl Struct_ipv6_extension_fragment {
    pub unsafe fn frag_data(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_ipv6_extension_fragment {
    fn default() -> Struct_ipv6_extension_fragment {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_kni_req_id = ::libc::c_uint;
pub const RTE_KNI_REQ_UNKNOWN: ::libc::c_uint = 0;
pub const RTE_KNI_REQ_CHANGE_MTU: ::libc::c_uint = 1;
pub const RTE_KNI_REQ_CFG_NETWORK_IF: ::libc::c_uint = 2;
pub const RTE_KNI_REQ_MAX: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_request {
    pub req_id: u32,
    pub _bindgen_data_1_: [u32; 1us],
    pub result: i32,
}
impl Struct_rte_kni_request {
    pub unsafe fn new_mtu(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn if_up(&mut self) -> *mut u8 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_rte_kni_request {
    fn default() -> Struct_rte_kni_request { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_fifo {
    pub write: ::libc::c_uint,
    pub read: ::libc::c_uint,
    pub len: ::libc::c_uint,
    pub elem_size: ::libc::c_uint,
    pub buffer: [*mut ::libc::c_void; 0us],
}
impl ::std::default::Default for Struct_rte_kni_fifo {
    fn default() -> Struct_rte_kni_fifo { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_mbuf {
    pub buf_addr: *mut ::libc::c_void,
    pub pad0: [::libc::c_char; 10us],
    pub data_off: u16,
    pub pad1: [::libc::c_char; 4us],
    pub ol_flags: u64,
    pub pad2: [::libc::c_char; 2us],
    pub data_len: u16,
    pub pkt_len: u32,
    pub pad3: [::libc::c_char; 8us],
    pub pool: *mut ::libc::c_void,
    pub next: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_rte_kni_mbuf {
    fn default() -> Struct_rte_kni_mbuf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_device_info {
    pub name: [::libc::c_char; 32us],
    pub tx_phys: phys_addr_t,
    pub rx_phys: phys_addr_t,
    pub alloc_phys: phys_addr_t,
    pub free_phys: phys_addr_t,
    pub req_phys: phys_addr_t,
    pub resp_phys: phys_addr_t,
    pub sync_phys: phys_addr_t,
    pub sync_va: *mut ::libc::c_void,
    pub mbuf_va: *mut ::libc::c_void,
    pub mbuf_phys: phys_addr_t,
    pub vendor_id: u16,
    pub device_id: u16,
    pub bus: u8,
    pub devid: u8,
    pub function: u8,
    pub group_id: u16,
    pub core_id: u32,
    pub _bindgen_bitfield_1_: u8,
    pub mbuf_size: ::libc::c_uint,
}
impl ::std::default::Default for Struct_rte_kni_device_info {
    fn default() -> Struct_rte_kni_device_info {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_rte_kni { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_ops {
    pub port_id: u8,
    pub change_mtu: ::std::option::Option<extern "C" fn
                                              (port_id: u8,
                                               new_mtu: ::libc::c_uint)
                                              -> ::libc::c_int>,
    pub config_network_if: ::std::option::Option<extern "C" fn
                                                     (port_id: u8,
                                                      if_up: u8)
                                                     -> ::libc::c_int>,
}
impl ::std::default::Default for Struct_rte_kni_ops {
    fn default() -> Struct_rte_kni_ops { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_conf {
    pub name: [::libc::c_char; 32us],
    pub core_id: u32,
    pub group_id: u16,
    pub mbuf_size: ::libc::c_uint,
    pub addr: Struct_rte_pci_addr,
    pub id: Struct_rte_pci_id,
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::default::Default for Struct_rte_kni_conf {
    fn default() -> Struct_rte_kni_conf { unsafe { ::std::mem::zeroed() } }
}
pub type arg_handler_t =
    ::std::option::Option<extern "C" fn
                              (key: *const ::libc::c_char,
                               value: *const ::libc::c_char,
                               opaque: *mut ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kvargs_pair {
    pub key: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_rte_kvargs_pair {
    fn default() -> Struct_rte_kvargs_pair { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kvargs {
    pub _str: *mut ::libc::c_char,
    pub count: ::libc::c_uint,
    pub pairs: [Struct_rte_kvargs_pair; 32us],
}
impl ::std::default::Default for Struct_rte_kvargs {
    fn default() -> Struct_rte_kvargs { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_lpm6 { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_lpm6_config {
    pub max_rules: u32,
    pub number_tbl8s: u32,
    pub flags: ::libc::c_int,
}
impl ::std::default::Default for Struct_rte_lpm6_config {
    fn default() -> Struct_rte_lpm6_config { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_lpm_tbl24_entry {
    pub _bindgen_data_1_: [u8; 1us],
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
    pub _bindgen_bitfield_3_: u8,
}
impl Struct_rte_lpm_tbl24_entry {
    pub unsafe fn next_hop(&mut self) -> *mut u8 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn tbl8_gindex(&mut self) -> *mut u8 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_rte_lpm_tbl24_entry {
    fn default() -> Struct_rte_lpm_tbl24_entry {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_lpm_tbl8_entry {
    pub next_hop: u8,
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
    pub _bindgen_bitfield_3_: u8,
}
impl ::std::default::Default for Struct_rte_lpm_tbl8_entry {
    fn default() -> Struct_rte_lpm_tbl8_entry {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_lpm_rule {
    pub ip: u32,
    pub next_hop: u8,
}
impl ::std::default::Default for Struct_rte_lpm_rule {
    fn default() -> Struct_rte_lpm_rule { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_lpm_rule_info {
    pub used_rules: u32,
    pub first_rule: u32,
}
impl ::std::default::Default for Struct_rte_lpm_rule_info {
    fn default() -> Struct_rte_lpm_rule_info {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_lpm {
    pub name: [::libc::c_char; 32us],
    pub mem_location: ::libc::c_int,
    pub max_rules: u32,
    pub rule_info: [Struct_rte_lpm_rule_info; 32us],
    pub tbl24: [Struct_rte_lpm_tbl24_entry; 16777216us],
    pub tbl8: [Struct_rte_lpm_tbl8_entry; 65536us],
    pub rules_tbl: [Struct_rte_lpm_rule; 0us],
}
impl ::std::default::Default for Struct_rte_lpm {
    fn default() -> Struct_rte_lpm { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_meter_color = ::libc::c_uint;
pub const e_RTE_METER_GREEN: ::libc::c_uint = 0;
pub const e_RTE_METER_YELLOW: ::libc::c_uint = 1;
pub const e_RTE_METER_RED: ::libc::c_uint = 2;
pub const e_RTE_METER_COLORS: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_meter_srtcm_params {
    pub cir: u64,
    pub cbs: u64,
    pub ebs: u64,
}
impl ::std::default::Default for Struct_rte_meter_srtcm_params {
    fn default() -> Struct_rte_meter_srtcm_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_meter_trtcm_params {
    pub cir: u64,
    pub pir: u64,
    pub cbs: u64,
    pub pbs: u64,
}
impl ::std::default::Default for Struct_rte_meter_trtcm_params {
    fn default() -> Struct_rte_meter_trtcm_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_meter_srtcm {
    pub time: u64,
    pub tc: u64,
    pub te: u64,
    pub cbs: u64,
    pub ebs: u64,
    pub cir_period: u64,
    pub cir_bytes_per_period: u64,
}
impl ::std::default::Default for Struct_rte_meter_srtcm {
    fn default() -> Struct_rte_meter_srtcm { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_meter_trtcm {
    pub time_tc: u64,
    pub time_tp: u64,
    pub tc: u64,
    pub tp: u64,
    pub cbs: u64,
    pub pbs: u64,
    pub cir_period: u64,
    pub cir_bytes_per_period: u64,
    pub pir_period: u64,
    pub pir_bytes_per_period: u64,
}
impl ::std::default::Default for Struct_rte_meter_trtcm {
    fn default() -> Struct_rte_meter_trtcm { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_intr_mode = ::libc::c_uint;
pub const RTE_INTR_MODE_NONE: ::libc::c_uint = 0;
pub const RTE_INTR_MODE_LEGACY: ::libc::c_uint = 1;
pub const RTE_INTR_MODE_MSI: ::libc::c_uint = 2;
pub const RTE_INTR_MODE_MSIX: ::libc::c_uint = 3;
pub type rte_port_in_op_create =
    ::std::option::Option<extern "C" fn
                              (params: *mut ::libc::c_void,
                               socket_id: ::libc::c_int)
                              -> *mut ::libc::c_void>;
pub type rte_port_in_op_free =
    ::std::option::Option<extern "C" fn(port: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type rte_port_in_op_rx =
    ::std::option::Option<extern "C" fn
                              (port: *mut ::libc::c_void,
                               pkts: *mut *mut Struct_rte_mbuf,
                               n_pkts: u32) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_in_ops {
    pub f_create: rte_port_in_op_create,
    pub f_free: rte_port_in_op_free,
    pub f_rx: rte_port_in_op_rx,
}
impl ::std::default::Default for Struct_rte_port_in_ops {
    fn default() -> Struct_rte_port_in_ops { unsafe { ::std::mem::zeroed() } }
}
pub type rte_port_out_op_create =
    ::std::option::Option<extern "C" fn
                              (params: *mut ::libc::c_void,
                               socket_id: ::libc::c_int)
                              -> *mut ::libc::c_void>;
pub type rte_port_out_op_free =
    ::std::option::Option<extern "C" fn(port: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type rte_port_out_op_tx =
    ::std::option::Option<extern "C" fn
                              (port: *mut ::libc::c_void,
                               pkt: *mut Struct_rte_mbuf) -> ::libc::c_int>;
pub type rte_port_out_op_tx_bulk =
    ::std::option::Option<extern "C" fn
                              (port: *mut ::libc::c_void,
                               pkt: *mut *mut Struct_rte_mbuf,
                               pkts_mask: u64) -> ::libc::c_int>;
pub type rte_port_out_op_flush =
    ::std::option::Option<extern "C" fn(port: *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_out_ops {
    pub f_create: rte_port_out_op_create,
    pub f_free: rte_port_out_op_free,
    pub f_tx: rte_port_out_op_tx,
    pub f_tx_bulk: rte_port_out_op_tx_bulk,
    pub f_flush: rte_port_out_op_flush,
}
impl ::std::default::Default for Struct_rte_port_out_ops {
    fn default() -> Struct_rte_port_out_ops {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rte_table_op_create =
    ::std::option::Option<extern "C" fn
                              (params: *mut ::libc::c_void,
                               socket_id: ::libc::c_int, entry_size: u32)
                              -> *mut ::libc::c_void>;
pub type rte_table_op_free =
    ::std::option::Option<extern "C" fn(table: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type rte_table_op_entry_add =
    ::std::option::Option<extern "C" fn
                              (table: *mut ::libc::c_void,
                               key: *mut ::libc::c_void,
                               entry: *mut ::libc::c_void,
                               key_found: *mut ::libc::c_int,
                               entry_ptr: *mut *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type rte_table_op_entry_delete =
    ::std::option::Option<extern "C" fn
                              (table: *mut ::libc::c_void,
                               key: *mut ::libc::c_void,
                               key_found: *mut ::libc::c_int,
                               entry: *mut ::libc::c_void) -> ::libc::c_int>;
pub type rte_table_op_lookup =
    ::std::option::Option<extern "C" fn
                              (table: *mut ::libc::c_void,
                               pkts: *mut *mut Struct_rte_mbuf,
                               pkts_mask: u64,
                               lookup_hit_mask: *mut u64,
                               entries: *mut *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_ops {
    pub f_create: rte_table_op_create,
    pub f_free: rte_table_op_free,
    pub f_add: rte_table_op_entry_add,
    pub f_delete: rte_table_op_entry_delete,
    pub f_lookup: rte_table_op_lookup,
}
impl ::std::default::Default for Struct_rte_table_ops {
    fn default() -> Struct_rte_table_ops { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_pipeline { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pipeline_params {
    pub name: *const ::libc::c_char,
    pub socket_id: ::libc::c_int,
    pub offset_port_id: u32,
}
impl ::std::default::Default for Struct_rte_pipeline_params {
    fn default() -> Struct_rte_pipeline_params {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_rte_pipeline_action = ::libc::c_uint;
pub const RTE_PIPELINE_ACTION_DROP: ::libc::c_uint = 0;
pub const RTE_PIPELINE_ACTION_PORT: ::libc::c_uint = 1;
pub const RTE_PIPELINE_ACTION_PORT_META: ::libc::c_uint = 2;
pub const RTE_PIPELINE_ACTION_TABLE: ::libc::c_uint = 3;
pub const RTE_PIPELINE_ACTIONS: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pipeline_table_entry {
    pub action: Enum_rte_pipeline_action,
    pub _bindgen_data_1_: [u32; 1us],
    pub action_data: [u8; 0us],
}
impl Struct_rte_pipeline_table_entry {
    pub unsafe fn port_id(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn table_id(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_rte_pipeline_table_entry {
    fn default() -> Struct_rte_pipeline_table_entry {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rte_pipeline_table_action_handler_hit =
    ::std::option::Option<extern "C" fn
                              (pkts: *mut *mut Struct_rte_mbuf,
                               pkts_mask: *mut u64,
                               entries:
                                   *mut *mut Struct_rte_pipeline_table_entry,
                               arg: *mut ::libc::c_void) -> ::libc::c_int>;
pub type rte_pipeline_table_action_handler_miss =
    ::std::option::Option<extern "C" fn
                              (pkts: *mut *mut Struct_rte_mbuf,
                               pkts_mask: *mut u64,
                               entry: *mut Struct_rte_pipeline_table_entry,
                               arg: *mut ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pipeline_table_params {
    pub ops: *mut Struct_rte_table_ops,
    pub arg_create: *mut ::libc::c_void,
    pub f_action_hit: rte_pipeline_table_action_handler_hit,
    pub f_action_miss: rte_pipeline_table_action_handler_miss,
    pub arg_ah: *mut ::libc::c_void,
    pub action_data_size: u32,
}
impl ::std::default::Default for Struct_rte_pipeline_table_params {
    fn default() -> Struct_rte_pipeline_table_params {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rte_pipeline_port_in_action_handler =
    ::std::option::Option<extern "C" fn
                              (pkts: *mut *mut Struct_rte_mbuf, n: u32,
                               pkts_mask: *mut u64,
                               arg: *mut ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pipeline_port_in_params {
    pub ops: *mut Struct_rte_port_in_ops,
    pub arg_create: *mut ::libc::c_void,
    pub f_action: rte_pipeline_port_in_action_handler,
    pub arg_ah: *mut ::libc::c_void,
    pub burst_size: u32,
}
impl ::std::default::Default for Struct_rte_pipeline_port_in_params {
    fn default() -> Struct_rte_pipeline_port_in_params {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rte_pipeline_port_out_action_handler =
    ::std::option::Option<extern "C" fn
                              (pkt: *mut Struct_rte_mbuf,
                               pkt_mask: *mut u64,
                               arg: *mut ::libc::c_void) -> ::libc::c_int>;
pub type rte_pipeline_port_out_action_handler_bulk =
    ::std::option::Option<extern "C" fn
                              (pkts: *mut *mut Struct_rte_mbuf,
                               pkts_mask: *mut u64,
                               arg: *mut ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pipeline_port_out_params {
    pub ops: *mut Struct_rte_port_out_ops,
    pub arg_create: *mut ::libc::c_void,
    pub f_action: rte_pipeline_port_out_action_handler,
    pub f_action_bulk: rte_pipeline_port_out_action_handler_bulk,
    pub arg_ah: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_rte_pipeline_port_out_params {
    fn default() -> Struct_rte_pipeline_port_out_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_ethdev_reader_params {
    pub port_id: u8,
    pub queue_id: u16,
}
impl ::std::default::Default for Struct_rte_port_ethdev_reader_params {
    fn default() -> Struct_rte_port_ethdev_reader_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_ethdev_writer_params {
    pub port_id: u8,
    pub queue_id: u16,
    pub tx_burst_sz: u32,
}
impl ::std::default::Default for Struct_rte_port_ethdev_writer_params {
    fn default() -> Struct_rte_port_ethdev_writer_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_ring_reader_ipv4_frag_params {
    pub ring: *mut Struct_rte_ring,
    pub mtu: u32,
    pub metadata_size: u32,
    pub pool_direct: *mut Struct_rte_mempool,
    pub pool_indirect: *mut Struct_rte_mempool,
}
impl ::std::default::Default for Struct_rte_port_ring_reader_ipv4_frag_params
 {
    fn default() -> Struct_rte_port_ring_reader_ipv4_frag_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_ring_writer_ipv4_ras_params {
    pub ring: *mut Struct_rte_ring,
    pub tx_burst_sz: u32,
}
impl ::std::default::Default for Struct_rte_port_ring_writer_ipv4_ras_params {
    fn default() -> Struct_rte_port_ring_writer_ipv4_ras_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_ring_reader_params {
    pub ring: *mut Struct_rte_ring,
}
impl ::std::default::Default for Struct_rte_port_ring_reader_params {
    fn default() -> Struct_rte_port_ring_reader_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_ring_writer_params {
    pub ring: *mut Struct_rte_ring,
    pub tx_burst_sz: u32,
}
impl ::std::default::Default for Struct_rte_port_ring_writer_params {
    fn default() -> Struct_rte_port_ring_writer_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_sched_subport_params {
    pub tb_rate: u32,
    pub tb_size: u32,
    pub tc_rate: [u32; 4us],
    pub tc_period: u32,
}
impl ::std::default::Default for Struct_rte_sched_subport_params {
    fn default() -> Struct_rte_sched_subport_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_sched_subport_stats {
    pub n_pkts_tc: [u32; 4us],
    pub n_pkts_tc_dropped: [u32; 4us],
    pub n_bytes_tc: [u32; 4us],
    pub n_bytes_tc_dropped: [u32; 4us],
}
impl ::std::default::Default for Struct_rte_sched_subport_stats {
    fn default() -> Struct_rte_sched_subport_stats {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_sched_pipe_params {
    pub tb_rate: u32,
    pub tb_size: u32,
    pub tc_rate: [u32; 4us],
    pub tc_period: u32,
    pub wrr_weights: [u8; 16us],
}
impl ::std::default::Default for Struct_rte_sched_pipe_params {
    fn default() -> Struct_rte_sched_pipe_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_sched_queue_stats {
    pub n_pkts: u32,
    pub n_pkts_dropped: u32,
    pub n_bytes: u32,
    pub n_bytes_dropped: u32,
}
impl ::std::default::Default for Struct_rte_sched_queue_stats {
    fn default() -> Struct_rte_sched_queue_stats {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_sched_port_params {
    pub name: *const ::libc::c_char,
    pub socket: ::libc::c_int,
    pub rate: u32,
    pub mtu: u32,
    pub frame_overhead: u32,
    pub n_subports_per_port: u32,
    pub n_pipes_per_subport: u32,
    pub qsize: [u16; 4us],
    pub pipe_profiles: *mut Struct_rte_sched_pipe_params,
    pub n_pipe_profiles: u32,
}
impl ::std::default::Default for Struct_rte_sched_port_params {
    fn default() -> Struct_rte_sched_port_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_sched_port_hierarchy {
    pub _bindgen_bitfield_1_: u32,
    pub _bindgen_bitfield_2_: u32,
    pub _bindgen_bitfield_3_: u32,
    pub _bindgen_bitfield_4_: u32,
    pub _bindgen_bitfield_5_: u32,
}
impl ::std::default::Default for Struct_rte_sched_port_hierarchy {
    fn default() -> Struct_rte_sched_port_hierarchy {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_rte_sched_port { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_sched_reader_params {
    pub sched: *mut Struct_rte_sched_port,
}
impl ::std::default::Default for Struct_rte_port_sched_reader_params {
    fn default() -> Struct_rte_port_sched_reader_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_sched_writer_params {
    pub sched: *mut Struct_rte_sched_port,
    pub tx_burst_sz: u32,
}
impl ::std::default::Default for Struct_rte_port_sched_writer_params {
    fn default() -> Struct_rte_port_sched_writer_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_port_source_params {
    pub mempool: *mut Struct_rte_mempool,
}
impl ::std::default::Default for Struct_rte_port_source_params {
    fn default() -> Struct_rte_port_source_params {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_power_management_env = ::libc::c_uint;
pub const PM_ENV_NOT_SET: ::libc::c_uint = 0;
pub const PM_ENV_ACPI_CPUFREQ: ::libc::c_uint = 1;
pub const PM_ENV_KVM_VM: ::libc::c_uint = 2;
pub type rte_power_freqs_t =
    ::std::option::Option<extern "C" fn
                              (lcore_id: ::libc::c_uint, freqs: *mut u32,
                               num: u32) -> u32>;
pub type rte_power_get_freq_t =
    ::std::option::Option<extern "C" fn(lcore_id: ::libc::c_uint)
                              -> u32>;
pub type rte_power_set_freq_t =
    ::std::option::Option<extern "C" fn
                              (lcore_id: ::libc::c_uint, index: u32)
                              -> ::libc::c_int>;
pub type rte_power_freq_change_t =
    ::std::option::Option<extern "C" fn(lcore_id: ::libc::c_uint)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_red_params {
    pub min_th: u16,
    pub max_th: u16,
    pub maxp_inv: u16,
    pub wq_log2: u16,
}
impl ::std::default::Default for Struct_rte_red_params {
    fn default() -> Struct_rte_red_params { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_red_config {
    pub min_th: u32,
    pub max_th: u32,
    pub pa_const: u32,
    pub maxp_inv: u8,
    pub wq_log2: u8,
}
impl ::std::default::Default for Struct_rte_red_config {
    fn default() -> Struct_rte_red_config { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_red {
    pub avg: u32,
    pub count: u32,
    pub q_time: u64,
}
impl ::std::default::Default for Struct_rte_red {
    fn default() -> Struct_rte_red { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_hdr {
    pub src_port: u16,
    pub dst_port: u16,
    pub tag: u32,
    pub cksum: u32,
}
impl ::std::default::Default for Struct_sctp_hdr {
    fn default() -> Struct_sctp_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_acl_params {
    pub name: *const ::libc::c_char,
    pub n_rules: u32,
    pub n_rule_fields: u32,
    pub field_format: [Struct_rte_acl_field_def; 64us],
}
impl ::std::default::Default for Struct_rte_table_acl_params {
    fn default() -> Struct_rte_table_acl_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_acl_rule_add_params {
    pub priority: i32,
    pub field_value: [Struct_rte_acl_field; 64us],
}
impl ::std::default::Default for Struct_rte_table_acl_rule_add_params {
    fn default() -> Struct_rte_table_acl_rule_add_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_acl_rule_delete_params {
    pub field_value: [Struct_rte_acl_field; 64us],
}
impl ::std::default::Default for Struct_rte_table_acl_rule_delete_params {
    fn default() -> Struct_rte_table_acl_rule_delete_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_array_params {
    pub n_entries: u32,
    pub offset: u32,
}
impl ::std::default::Default for Struct_rte_table_array_params {
    fn default() -> Struct_rte_table_array_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_array_key {
    pub pos: u32,
}
impl ::std::default::Default for Struct_rte_table_array_key {
    fn default() -> Struct_rte_table_array_key {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rte_table_hash_op_hash =
    ::std::option::Option<extern "C" fn
                              (key: *mut ::libc::c_void, key_size: u32,
                               seed: u64) -> u64>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_ext_params {
    pub key_size: u32,
    pub n_keys: u32,
    pub n_buckets: u32,
    pub n_buckets_ext: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_ext_params {
    fn default() -> Struct_rte_table_hash_ext_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_lru_params {
    pub key_size: u32,
    pub n_keys: u32,
    pub n_buckets: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_lru_params {
    fn default() -> Struct_rte_table_hash_lru_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_key8_lru_params {
    pub n_entries: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_key8_lru_params {
    fn default() -> Struct_rte_table_hash_key8_lru_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_key8_ext_params {
    pub n_entries: u32,
    pub n_entries_ext: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_key8_ext_params {
    fn default() -> Struct_rte_table_hash_key8_ext_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_key16_lru_params {
    pub n_entries: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_key16_lru_params {
    fn default() -> Struct_rte_table_hash_key16_lru_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_key16_ext_params {
    pub n_entries: u32,
    pub n_entries_ext: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_key16_ext_params {
    fn default() -> Struct_rte_table_hash_key16_ext_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_key32_lru_params {
    pub n_entries: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_key32_lru_params {
    fn default() -> Struct_rte_table_hash_key32_lru_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_hash_key32_ext_params {
    pub n_entries: u32,
    pub n_entries_ext: u32,
    pub f_hash: rte_table_hash_op_hash,
    pub seed: u64,
    pub signature_offset: u32,
    pub key_offset: u32,
}
impl ::std::default::Default for Struct_rte_table_hash_key32_ext_params {
    fn default() -> Struct_rte_table_hash_key32_ext_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_lpm_params {
    pub n_rules: u32,
    pub entry_unique_size: u32,
    pub offset: u32,
}
impl ::std::default::Default for Struct_rte_table_lpm_params {
    fn default() -> Struct_rte_table_lpm_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_lpm_key {
    pub ip: u32,
    pub depth: u8,
}
impl ::std::default::Default for Struct_rte_table_lpm_key {
    fn default() -> Struct_rte_table_lpm_key {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_lpm_ipv6_params {
    pub n_rules: u32,
    pub number_tbl8s: u32,
    pub entry_unique_size: u32,
    pub offset: u32,
}
impl ::std::default::Default for Struct_rte_table_lpm_ipv6_params {
    fn default() -> Struct_rte_table_lpm_ipv6_params {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_table_lpm_ipv6_key {
    pub ip: [u8; 16us],
    pub depth: u8,
}
impl ::std::default::Default for Struct_rte_table_lpm_ipv6_key {
    fn default() -> Struct_rte_table_lpm_ipv6_key {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_hdr {
    pub src_port: u16,
    pub dst_port: u16,
    pub sent_seq: u32,
    pub recv_ack: u32,
    pub data_off: u8,
    pub tcp_flags: u8,
    pub rx_win: u16,
    pub cksum: u16,
    pub tcp_urp: u16,
}
impl ::std::default::Default for Struct_tcp_hdr {
    fn default() -> Struct_tcp_hdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_rte_timer_type = ::libc::c_uint;
pub const SINGLE: ::libc::c_uint = 0;
pub const PERIODICAL: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_timer_status {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_rte_timer_status {
    pub unsafe fn state(&mut self) -> *mut u16 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn owner(&mut self) -> *mut i16 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u32(&mut self) -> *mut u32 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_rte_timer_status {
    fn default() -> Union_rte_timer_status { unsafe { ::std::mem::zeroed() } }
}
pub type rte_timer_cb_t =
    extern "C" fn(arg1: *mut Struct_rte_timer, arg2: *mut ::libc::c_void)
        -> ();
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_timer {
    pub expire: u64,
    pub sl_next: [*mut Struct_rte_timer; 10us],
    pub status: Union_rte_timer_status,
    pub period: u64,
    pub f: *mut rte_timer_cb_t,
    pub arg: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_rte_timer {
    fn default() -> Struct_rte_timer { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_udp_hdr {
    pub src_port: u16,
    pub dst_port: u16,
    pub dgram_len: u16,
    pub dgram_cksum: u16,
}
impl ::std::default::Default for Struct_udp_hdr {
    fn default() -> Struct_udp_hdr { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut rte_logs: Struct_rte_logs;
    pub static mut eal_default_log_stream: *mut ::libc::FILE;
    pub static mut lcore_config: [Struct_lcore_config; 128us];
    pub static mut per_lcore__lcore_id: ::libc::c_void;
    pub static mut per_lcore__rte_errno: ::libc::c_void;
    pub static mut eal_timer_source: Enum_timer_source;
    pub static mut rte_cycles_vmware_tsc_map: ::libc::c_int;
    pub static mut pci_driver_list: Struct_pci_driver_list;
    pub static mut pci_device_list: Struct_pci_device_list;
    pub static mut devargs_list: Struct_rte_devargs_list;
    pub static mut rte_eth_devices: *mut Struct_rte_eth_dev;
    pub static mut rte_port_ethdev_reader_ops: Struct_rte_port_in_ops;
    pub static mut rte_port_ethdev_writer_ops: Struct_rte_port_out_ops;
    pub static mut rte_port_ring_reader_ipv4_frag_ops: Struct_rte_port_in_ops;
    pub static mut rte_port_ring_writer_ipv4_ras_ops: Struct_rte_port_out_ops;
    pub static mut rte_port_ring_reader_ops: Struct_rte_port_in_ops;
    pub static mut rte_port_ring_writer_ops: Struct_rte_port_out_ops;
    pub static mut rte_port_sched_reader_ops: Struct_rte_port_in_ops;
    pub static mut rte_port_sched_writer_ops: Struct_rte_port_out_ops;
    pub static mut rte_port_source_ops: Struct_rte_port_in_ops;
    pub static mut rte_port_sink_ops: Struct_rte_port_out_ops;
    pub static mut rte_power_freqs: rte_power_freqs_t;
    pub static mut rte_power_get_freq: rte_power_get_freq_t;
    pub static mut rte_power_set_freq: rte_power_set_freq_t;
    pub static mut rte_power_freq_up: rte_power_freq_change_t;
    pub static mut rte_power_freq_down: rte_power_freq_change_t;
    pub static mut rte_power_freq_max: rte_power_freq_change_t;
    pub static mut rte_power_freq_min: rte_power_freq_change_t;
    pub static mut rte_red_rand_val: u32;
    pub static mut rte_red_rand_seed: u32;
    pub static mut rte_red_log2_1_minus_Wq: [u16; 12us];
    pub static mut rte_red_pow2_frac_inv: [u16; 16us];
    pub static mut rte_table_acl_ops: Struct_rte_table_ops;
    pub static mut rte_table_array_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_ext_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_ext_dosig_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_lru_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_lru_dosig_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key8_lru_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key8_lru_dosig_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key8_ext_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key8_ext_dosig_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key16_lru_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key16_ext_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key32_lru_ops: Struct_rte_table_ops;
    pub static mut rte_table_hash_key32_ext_ops: Struct_rte_table_ops;
    pub static mut rte_table_lpm_ops: Struct_rte_table_ops;
    pub static mut rte_table_lpm_ipv6_ops: Struct_rte_table_ops;
    pub static mut rte_table_stub_ops: Struct_rte_table_ops;
}
extern "C" {
    pub fn rte_exit(exit_code: ::libc::c_int,
                    format: *const ::libc::c_char, ...) -> ();
    pub fn rte_mem_lock_page(virt: *const ::libc::c_void) -> ::libc::c_int;
    pub fn rte_mem_virt2phy(virt: *const ::libc::c_void) -> phys_addr_t;
    pub fn rte_eal_get_physmem_layout() -> *const Struct_rte_memseg;
    pub fn rte_dump_physmem_layout(f: *mut ::libc::FILE) -> ();
    pub fn rte_eal_get_physmem_size() -> u64;
    pub fn rte_memory_get_nchannel() -> ::libc::c_uint;
    pub fn rte_memory_get_nrank() -> ::libc::c_uint;
    pub fn rte_openlog_stream(f: *mut ::libc::FILE) -> ::libc::c_int;
    pub fn rte_set_log_level(level: u32) -> ();
    pub fn rte_get_log_level() -> u32;
    pub fn rte_set_log_type(_type: u32, enable: ::libc::c_int) -> ();
    pub fn rte_log_cur_msg_loglevel() -> ::libc::c_int;
    pub fn rte_log_cur_msg_logtype() -> ::libc::c_int;
    pub fn rte_log_set_history(enable: ::libc::c_int) -> ();
    pub fn rte_log_dump_history(f: *mut ::libc::FILE) -> ();
    pub fn rte_log_add_in_history(buf: *const ::libc::c_char, size: ::libc::size_t)
     -> ::libc::c_int;
    pub fn rte_log(level: u32, logtype: u32,
                   format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn rte_vlog(level: u32, logtype: u32,
                    format: *const ::libc::c_char, ap: ::libc::c_void)
     -> ::libc::c_int;
    pub fn rte_memzone_reserve(name: *const ::libc::c_char, len: ::libc::size_t,
                               socket_id: ::libc::c_int,
                               flags: ::libc::c_uint)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_reserve_aligned(name: *const ::libc::c_char,
                                       len: ::libc::size_t, socket_id: ::libc::c_int,
                                       flags: ::libc::c_uint,
                                       align: ::libc::c_uint)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_reserve_bounded(name: *const ::libc::c_char,
                                       len: ::libc::size_t, socket_id: ::libc::c_int,
                                       flags: ::libc::c_uint,
                                       align: ::libc::c_uint,
                                       bound: ::libc::c_uint)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_lookup(name: *const ::libc::c_char)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_dump(arg1: *mut ::libc::FILE) -> ();
    pub fn rte_memzone_walk(func:
                                ::std::option::Option<extern "C" fn
                                                          (arg1:
                                                               *const Struct_rte_memzone,
                                                           arg:
                                                               *mut ::libc::c_void)
                                                          -> ()>,
                            arg: *mut ::libc::c_void) -> ();
    pub fn rte_malloc(_type: *const ::libc::c_char, size: ::libc::size_t,
                      align: ::libc::c_uint) -> *mut ::libc::c_void;
    pub fn rte_zmalloc(_type: *const ::libc::c_char, size: ::libc::size_t,
                       align: ::libc::c_uint) -> *mut ::libc::c_void;
    pub fn rte_calloc(_type: *const ::libc::c_char, num: ::libc::size_t, size: ::libc::size_t,
                      align: ::libc::c_uint) -> *mut ::libc::c_void;
    pub fn rte_realloc(ptr: *mut ::libc::c_void, size: ::libc::size_t,
                       align: ::libc::c_uint) -> *mut ::libc::c_void;
    pub fn rte_malloc_socket(_type: *const ::libc::c_char, size: ::libc::size_t,
                             align: ::libc::c_uint, socket: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn rte_zmalloc_socket(_type: *const ::libc::c_char, size: ::libc::size_t,
                              align: ::libc::c_uint, socket: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn rte_calloc_socket(_type: *const ::libc::c_char, num: ::libc::size_t,
                             size: ::libc::size_t, align: ::libc::c_uint,
                             socket: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn rte_free(ptr: *mut ::libc::c_void) -> ();
    pub fn rte_malloc_validate(ptr: *const ::libc::c_void, size: *mut ::libc::size_t)
     -> ::libc::c_int;
    pub fn rte_malloc_get_socket_stats(socket: ::libc::c_int,
                                       socket_stats:
                                           *mut Struct_rte_malloc_socket_stats)
     -> ::libc::c_int;
    pub fn rte_malloc_dump_stats(f: *mut ::libc::FILE, _type: *const ::libc::c_char)
     -> ();
    pub fn rte_malloc_set_limit(_type: *const ::libc::c_char, max: ::libc::size_t)
     -> ::libc::c_int;
    pub fn rte_malloc_virt2phy(addr: *const ::libc::c_void) -> phys_addr_t;
    pub fn rte_eal_tailq_reserve(name: *const ::libc::c_char)
     -> *mut Struct_rte_tailq_head;
    pub fn rte_eal_tailq_reserve_by_idx(idx: ::libc::c_uint)
     -> *mut Struct_rte_tailq_head;
    pub fn rte_dump_tailq(f: *mut ::libc::FILE) -> ();
    pub fn rte_eal_tailq_lookup(name: *const ::libc::c_char)
     -> *mut Struct_rte_tailq_head;
    pub fn rte_eal_tailq_lookup_by_idx(idx: ::libc::c_uint)
     -> *mut Struct_rte_tailq_head;
    pub fn rte_eal_get_configuration() -> *mut Struct_rte_config;
    pub fn rte_eal_lcore_role(lcore_id: ::libc::c_uint)
     -> Enum_rte_lcore_role_t;
    pub fn rte_eal_process_type() -> Enum_rte_proc_type_t;
    pub fn rte_eal_iopl_init() -> ::libc::c_int;
    pub fn rte_eal_init(argc: ::libc::c_int, argv: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_set_application_usage_hook(usage_func: rte_usage_hook_t)
     -> rte_usage_hook_t;
    pub fn rte_eal_has_hugepages() -> ::libc::c_int;
    pub fn rte_eal_remote_launch(f: *mut lcore_function_t,
                                 arg: *mut ::libc::c_void,
                                 slave_id: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_eal_mp_remote_launch(f: *mut lcore_function_t,
                                    arg: *mut ::libc::c_void,
                                    call_master: Enum_rte_rmt_call_master_t)
     -> ::libc::c_int;
    pub fn rte_eal_get_lcore_state(slave_id: ::libc::c_uint)
     -> Enum_rte_lcore_state_t;
    pub fn rte_eal_wait_lcore(slave_id: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_eal_mp_wait_lcore() -> ();
    pub fn rte_strerror(errnum: ::libc::c_int) -> *const ::libc::c_char;
    pub fn rte_strsplit(string: *mut ::libc::c_char, stringlen: ::libc::c_int,
                        tokens: *mut *mut ::libc::c_char,
                        maxtokens: ::libc::c_int, delim: ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_cpu_check_supported() -> ();
    pub fn rte_dump_stack() -> ();
    pub fn rte_dump_registers() -> ();
    pub fn __rte_panic(funcname: *const ::libc::c_char,
                       format: *const ::libc::c_char, ...) -> ();
    pub fn rte_acl_create(param: *const Struct_rte_acl_param)
     -> *mut Struct_rte_acl_ctx;
    pub fn rte_acl_find_existing(name: *const ::libc::c_char)
     -> *mut Struct_rte_acl_ctx;
    pub fn rte_acl_free(ctx: *mut Struct_rte_acl_ctx) -> ();
    pub fn rte_acl_add_rules(ctx: *mut Struct_rte_acl_ctx,
                             rules: *const Struct_rte_acl_rule, num: u32)
     -> ::libc::c_int;
    pub fn rte_acl_reset_rules(ctx: *mut Struct_rte_acl_ctx) -> ();
    pub fn rte_acl_build(ctx: *mut Struct_rte_acl_ctx,
                         cfg: *const Struct_rte_acl_config) -> ::libc::c_int;
    pub fn rte_acl_reset(ctx: *mut Struct_rte_acl_ctx) -> ();
    pub fn rte_acl_classify(ctx: *const Struct_rte_acl_ctx,
                            data: *mut *const u8, results: *mut u32,
                            num: u32, categories: u32)
     -> ::libc::c_int;
    pub fn rte_acl_classify_alg(ctx: *const Struct_rte_acl_ctx,
                                data: *mut *const u8,
                                results: *mut u32, num: u32,
                                categories: u32,
                                alg: Enum_rte_acl_classify_alg)
     -> ::libc::c_int;
    pub fn rte_acl_set_ctx_classify(ctx: *mut Struct_rte_acl_ctx,
                                    alg: Enum_rte_acl_classify_alg)
     -> ::libc::c_int;
    pub fn rte_acl_dump(ctx: *const Struct_rte_acl_ctx) -> ();
    pub fn rte_acl_list_dump() -> ();
    pub fn rte_acl_ipv4vlan_add_rules(ctx: *mut Struct_rte_acl_ctx,
                                      rules:
                                          *const Struct_rte_acl_ipv4vlan_rule,
                                      num: u32) -> ::libc::c_int;
    pub fn rte_acl_ipv4vlan_build(ctx: *mut Struct_rte_acl_ctx,
                                  layout: *mut u32,
                                  num_categories: u32) -> ::libc::c_int;
    pub fn rte_eal_alarm_set(us: u64, cb: rte_eal_alarm_callback,
                             cb_arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn rte_eal_alarm_cancel(cb_fn: rte_eal_alarm_callback,
                                cb_arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn rte_approx(alpha: ::libc::c_double, d: ::libc::c_double,
                      p: *mut u32, q: *mut u32) -> ::libc::c_int;
    pub fn rte_cfgfile_load(filename: *const ::libc::c_char,
                            flags: ::libc::c_int) -> *mut Struct_rte_cfgfile;
    pub fn rte_cfgfile_num_sections(cfg: *mut Struct_rte_cfgfile,
                                    sec_name: *const ::libc::c_char,
                                    length: ::libc::size_t) -> ::libc::c_int;
    pub fn rte_cfgfile_sections(cfg: *mut Struct_rte_cfgfile,
                                sections: *mut *mut ::libc::c_char,
                                max_sections: ::libc::c_int) -> ::libc::c_int;
    pub fn rte_cfgfile_has_section(cfg: *mut Struct_rte_cfgfile,
                                   sectionname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_cfgfile_section_num_entries(cfg: *mut Struct_rte_cfgfile,
                                           sectionname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_cfgfile_section_entries(cfg: *mut Struct_rte_cfgfile,
                                       sectionname: *const ::libc::c_char,
                                       entries: *mut Struct_rte_cfgfile_entry,
                                       max_entries: ::libc::c_int)
     -> ::libc::c_int;
    pub fn rte_cfgfile_get_entry(cfg: *mut Struct_rte_cfgfile,
                                 sectionname: *const ::libc::c_char,
                                 entryname: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn rte_cfgfile_has_entry(cfg: *mut Struct_rte_cfgfile,
                                 sectionname: *const ::libc::c_char,
                                 entryname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_cfgfile_close(cfg: *mut Struct_rte_cfgfile) -> ::libc::c_int;
    pub fn rte_get_tsc_hz() -> u64;
    pub fn rte_delay_us(us: ::libc::c_uint) -> ();
    pub fn rte_intr_callback_register(intr_handle:
                                          *mut Struct_rte_intr_handle,
                                      cb: rte_intr_callback_fn,
                                      cb_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rte_intr_callback_unregister(intr_handle:
                                            *mut Struct_rte_intr_handle,
                                        cb: rte_intr_callback_fn,
                                        cb_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rte_intr_enable(intr_handle: *mut Struct_rte_intr_handle)
     -> ::libc::c_int;
    pub fn rte_intr_disable(intr_handle: *mut Struct_rte_intr_handle)
     -> ::libc::c_int;
    pub fn rte_eal_pci_probe() -> ::libc::c_int;
    pub fn rte_eal_pci_dump(f: *mut ::libc::FILE) -> ();
    pub fn rte_eal_pci_register(driver: *mut Struct_rte_pci_driver) -> ();
    pub fn rte_eal_pci_unregister(driver: *mut Struct_rte_pci_driver) -> ();
    pub fn rte_eal_devargs_add(devtype: Enum_rte_devtype,
                               devargs_str: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_eal_devargs_type_count(devtype: Enum_rte_devtype)
     -> ::libc::c_uint;
    pub fn rte_eal_devargs_dump(f: *mut ::libc::FILE) -> ();
    pub fn rte_eal_driver_register(driver: *mut Struct_rte_driver) -> ();
    pub fn rte_eal_driver_unregister(driver: *mut Struct_rte_driver) -> ();
    pub fn rte_eal_dev_init() -> ::libc::c_int;
    pub fn rte_ring_get_memsize(count: ::libc::c_uint) -> ::libc::ssize_t;
    pub fn rte_ring_init(r: *mut Struct_rte_ring, name: *const ::libc::c_char,
                         count: ::libc::c_uint, flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn rte_ring_create(name: *const ::libc::c_char, count: ::libc::c_uint,
                           socket_id: ::libc::c_int, flags: ::libc::c_uint)
     -> *mut Struct_rte_ring;
    pub fn rte_ring_set_water_mark(r: *mut Struct_rte_ring,
                                   count: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_ring_dump(f: *mut ::libc::FILE, r: *const Struct_rte_ring) -> ();
    pub fn rte_ring_list_dump(f: *mut ::libc::FILE) -> ();
    pub fn rte_ring_lookup(name: *const ::libc::c_char)
     -> *mut Struct_rte_ring;
    pub fn rte_mempool_obj_iter(vaddr: *mut ::libc::c_void, elt_num: u32,
                                elt_sz: ::libc::size_t, align: ::libc::size_t,
                                paddr: *const phys_addr_t, pg_num: u32,
                                pg_shift: u32,
                                obj_iter: rte_mempool_obj_iter_t,
                                obj_iter_arg: *mut ::libc::c_void)
     -> u32;
    pub fn rte_mempool_create(name: *const ::libc::c_char, n: ::libc::c_uint,
                              elt_size: ::libc::c_uint,
                              cache_size: ::libc::c_uint,
                              private_data_size: ::libc::c_uint,
                              mp_init: *mut rte_mempool_ctor_t,
                              mp_init_arg: *mut ::libc::c_void,
                              obj_init: *mut rte_mempool_obj_ctor_t,
                              obj_init_arg: *mut ::libc::c_void,
                              socket_id: ::libc::c_int, flags: ::libc::c_uint)
     -> *mut Struct_rte_mempool;
    pub fn rte_mempool_xmem_create(name: *const ::libc::c_char,
                                   n: ::libc::c_uint,
                                   elt_size: ::libc::c_uint,
                                   cache_size: ::libc::c_uint,
                                   private_data_size: ::libc::c_uint,
                                   mp_init: *mut rte_mempool_ctor_t,
                                   mp_init_arg: *mut ::libc::c_void,
                                   obj_init: *mut rte_mempool_obj_ctor_t,
                                   obj_init_arg: *mut ::libc::c_void,
                                   socket_id: ::libc::c_int,
                                   flags: ::libc::c_uint,
                                   vaddr: *mut ::libc::c_void,
                                   paddr: *const phys_addr_t,
                                   pg_num: u32, pg_shift: u32)
     -> *mut Struct_rte_mempool;
    pub fn rte_mempool_dump(f: *mut ::libc::FILE, mp: *const Struct_rte_mempool)
     -> ();
    pub fn rte_mempool_count(mp: *const Struct_rte_mempool) -> ::libc::c_uint;
    pub fn rte_mempool_audit(mp: *const Struct_rte_mempool) -> ();
    pub fn rte_mempool_list_dump(f: *mut ::libc::FILE) -> ();
    pub fn rte_mempool_lookup(name: *const ::libc::c_char)
     -> *mut Struct_rte_mempool;
    pub fn rte_mempool_calc_obj_size(elt_size: u32, flags: u32,
                                     sz: *mut Struct_rte_mempool_objsz)
     -> u32;
    pub fn rte_mempool_xmem_size(elt_num: u32, elt_sz: ::libc::size_t,
                                 pg_shift: u32) -> ::libc::size_t;
    pub fn rte_mempool_xmem_usage(vaddr: *mut ::libc::c_void,
                                  elt_num: u32, elt_sz: ::libc::size_t,
                                  paddr: *const phys_addr_t, pg_num: u32,
                                  pg_shift: u32) -> ::libc::ssize_t;
    pub fn rte_mempool_walk(func:
                                ::std::option::Option<extern "C" fn
                                                          (arg1:
                                                               *const Struct_rte_mempool,
                                                           arg:
                                                               *mut ::libc::c_void)
                                                          -> ()>,
                            arg: *mut ::libc::c_void) -> ();
    pub fn rte_get_rx_ol_flag_name(mask: u64) -> *const ::libc::c_char;
    pub fn rte_get_tx_ol_flag_name(mask: u64) -> *const ::libc::c_char;
    pub fn rte_mbuf_sanity_check(m: *const Struct_rte_mbuf,
                                 is_header: ::libc::c_int) -> ();
    pub fn rte_ctrlmbuf_init(mp: *mut Struct_rte_mempool,
                             opaque_arg: *mut ::libc::c_void,
                             m: *mut ::libc::c_void, i: ::libc::c_uint) -> ();
    pub fn rte_pktmbuf_init(mp: *mut Struct_rte_mempool,
                            opaque_arg: *mut ::libc::c_void,
                            m: *mut ::libc::c_void, i: ::libc::c_uint) -> ();
    pub fn rte_pktmbuf_pool_init(mp: *mut Struct_rte_mempool,
                                 opaque_arg: *mut ::libc::c_void) -> ();
    pub fn rte_pktmbuf_dump(f: *mut ::libc::FILE, m: *const Struct_rte_mbuf,
                            dump_len: ::libc::c_uint) -> ();
    pub fn rte_distributor_create(name: *const ::libc::c_char,
                                  socket_id: ::libc::c_uint,
                                  num_workers: ::libc::c_uint)
     -> *mut Struct_rte_distributor;
    pub fn rte_distributor_process(d: *mut Struct_rte_distributor,
                                   mbufs: *mut *mut Struct_rte_mbuf,
                                   num_mbufs: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn rte_distributor_returned_pkts(d: *mut Struct_rte_distributor,
                                         mbufs: *mut *mut Struct_rte_mbuf,
                                         max_mbufs: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn rte_distributor_flush(d: *mut Struct_rte_distributor)
     -> ::libc::c_int;
    pub fn rte_distributor_clear_returns(d: *mut Struct_rte_distributor)
     -> ();
    pub fn rte_distributor_get_pkt(d: *mut Struct_rte_distributor,
                                   worker_id: ::libc::c_uint,
                                   oldpkt: *mut Struct_rte_mbuf)
     -> *mut Struct_rte_mbuf;
    pub fn rte_distributor_return_pkt(d: *mut Struct_rte_distributor,
                                      worker_id: ::libc::c_uint,
                                      mbuf: *mut Struct_rte_mbuf)
     -> ::libc::c_int;
    pub fn rte_distributor_request_pkt(d: *mut Struct_rte_distributor,
                                       worker_id: ::libc::c_uint,
                                       oldpkt: *mut Struct_rte_mbuf) -> ();
    pub fn rte_distributor_poll_pkt(d: *mut Struct_rte_distributor,
                                    worker_id: ::libc::c_uint)
     -> *mut Struct_rte_mbuf;
    pub fn rte_pmd_af_packet_devinit(name: *const ::libc::c_char,
                                     params: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_eth_bond_8023ad_conf_get(port_id: u8,
                                        conf:
                                            *mut Struct_rte_eth_bond_8023ad_conf)
     -> ::libc::c_int;
    pub fn rte_eth_bond_8023ad_setup(port_id: u8,
                                     conf:
                                         *mut Struct_rte_eth_bond_8023ad_conf)
     -> ::libc::c_int;
    pub fn rte_eth_bond_8023ad_slave_info(port_id: u8, slave_id: u8,
                                          conf:
                                              *mut Struct_rte_eth_bond_8023ad_slave_info)
     -> ::libc::c_int;
    pub fn rte_eth_bond_create(name: *const ::libc::c_char, mode: u8,
                               socket_id: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_slave_add(bonded_port_id: u8,
                                  slave_port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_slave_remove(bonded_port_id: u8,
                                     slave_port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_mode_set(bonded_port_id: u8, mode: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_mode_get(bonded_port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_primary_set(bonded_port_id: u8,
                                    slave_port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_primary_get(bonded_port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_slaves_get(bonded_port_id: u8,
                                   slaves: *mut u8, len: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_active_slaves_get(bonded_port_id: u8,
                                          slaves: *mut u8, len: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_mac_address_set(bonded_port_id: u8,
                                        mac_addr: *mut Struct_ether_addr)
     -> ::libc::c_int;
    pub fn rte_eth_bond_mac_address_reset(bonded_port_id: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_xmit_policy_set(bonded_port_id: u8,
                                        policy: u8) -> ::libc::c_int;
    pub fn rte_eth_bond_xmit_policy_get(bonded_port_id: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_link_monitoring_set(bonded_port_id: u8,
                                            internal_ms: u32)
     -> ::libc::c_int;
    pub fn rte_eth_bond_link_monitoring_get(bonded_port_id: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_link_down_prop_delay_set(bonded_port_id: u8,
                                                 delay_ms: u32)
     -> ::libc::c_int;
    pub fn rte_eth_bond_link_down_prop_delay_get(bonded_port_id: u8)
     -> ::libc::c_int;
    pub fn rte_eth_bond_link_up_prop_delay_set(bonded_port_id: u8,
                                               delay_ms: u32)
     -> ::libc::c_int;
    pub fn rte_eth_bond_link_up_prop_delay_get(bonded_port_id: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_count() -> u8;
    pub fn rte_eth_dev_allocate(name: *const ::libc::c_char)
     -> *mut Struct_rte_eth_dev;
    pub fn rte_eth_driver_register(eth_drv: *mut Struct_eth_driver) -> ();
    pub fn rte_eth_dev_configure(port_id: u8, nb_rx_queue: u16,
                                 nb_tx_queue: u16,
                                 eth_conf: *const Struct_rte_eth_conf)
     -> ::libc::c_int;
    pub fn rte_eth_rx_queue_setup(port_id: u8, rx_queue_id: u16,
                                  nb_rx_desc: u16,
                                  socket_id: ::libc::c_uint,
                                  rx_conf: *const Struct_rte_eth_rxconf,
                                  mb_pool: *mut Struct_rte_mempool)
     -> ::libc::c_int;
    pub fn rte_eth_tx_queue_setup(port_id: u8, tx_queue_id: u16,
                                  nb_tx_desc: u16,
                                  socket_id: ::libc::c_uint,
                                  tx_conf: *const Struct_rte_eth_txconf)
     -> ::libc::c_int;
    pub fn rte_eth_dev_socket_id(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_rx_queue_start(port_id: u8, rx_queue_id: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_rx_queue_stop(port_id: u8, rx_queue_id: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_tx_queue_start(port_id: u8, tx_queue_id: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_tx_queue_stop(port_id: u8, tx_queue_id: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_start(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_stop(port_id: u8) -> ();
    pub fn rte_eth_dev_set_link_up(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_set_link_down(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_close(port_id: u8) -> ();
    pub fn rte_eth_promiscuous_enable(port_id: u8) -> ();
    pub fn rte_eth_promiscuous_disable(port_id: u8) -> ();
    pub fn rte_eth_promiscuous_get(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_allmulticast_enable(port_id: u8) -> ();
    pub fn rte_eth_allmulticast_disable(port_id: u8) -> ();
    pub fn rte_eth_allmulticast_get(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_link_get(port_id: u8, link: *mut Struct_rte_eth_link)
     -> ();
    pub fn rte_eth_link_get_nowait(port_id: u8,
                                   link: *mut Struct_rte_eth_link) -> ();
    pub fn rte_eth_stats_get(port_id: u8,
                             stats: *mut Struct_rte_eth_stats) -> ();
    pub fn rte_eth_stats_reset(port_id: u8) -> ();
    pub fn rte_eth_xstats_get(port_id: u8,
                              xstats: *mut Struct_rte_eth_xstats,
                              n: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_eth_xstats_reset(port_id: u8) -> ();
    pub fn rte_eth_dev_set_tx_queue_stats_mapping(port_id: u8,
                                                  tx_queue_id: u16,
                                                  stat_idx: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_rx_queue_stats_mapping(port_id: u8,
                                                  rx_queue_id: u16,
                                                  stat_idx: u8)
     -> ::libc::c_int;
    pub fn rte_eth_macaddr_get(port_id: u8,
                               mac_addr: *mut Struct_ether_addr) -> ();
    pub fn rte_eth_dev_info_get(port_id: u8,
                                dev_info: *mut Struct_rte_eth_dev_info) -> ();
    pub fn rte_eth_dev_get_mtu(port_id: u8, mtu: *mut u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_mtu(port_id: u8, mtu: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_vlan_filter(port_id: u8, vlan_id: u16,
                                   on: ::libc::c_int) -> ::libc::c_int;
    pub fn rte_eth_dev_set_vlan_strip_on_queue(port_id: u8,
                                               rx_queue_id: u16,
                                               on: ::libc::c_int)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_vlan_ether_type(port_id: u8,
                                           tag_type: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_vlan_offload(port_id: u8,
                                        offload_mask: ::libc::c_int)
     -> ::libc::c_int;
    pub fn rte_eth_dev_get_vlan_offload(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_set_vlan_pvid(port_id: u8, pvid: u16,
                                     on: ::libc::c_int) -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_add_signature_filter(port_id: u8,
                                                 fdir_filter:
                                                     *mut Struct_rte_fdir_filter,
                                                 rx_queue: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_update_signature_filter(port_id: u8,
                                                    fdir_ftr:
                                                        *mut Struct_rte_fdir_filter,
                                                    rx_queue: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_remove_signature_filter(port_id: u8,
                                                    fdir_ftr:
                                                        *mut Struct_rte_fdir_filter)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_get_infos(port_id: u8,
                                      fdir: *mut Struct_rte_eth_fdir)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_add_perfect_filter(port_id: u8,
                                               fdir_filter:
                                                   *mut Struct_rte_fdir_filter,
                                               soft_id: u16,
                                               rx_queue: u8,
                                               drop: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_update_perfect_filter(port_id: u8,
                                                  fdir_filter:
                                                      *mut Struct_rte_fdir_filter,
                                                  soft_id: u16,
                                                  rx_queue: u8,
                                                  drop: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_remove_perfect_filter(port_id: u8,
                                                  fdir_filter:
                                                      *mut Struct_rte_fdir_filter,
                                                  soft_id: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_fdir_set_masks(port_id: u8,
                                      fdir_mask: *mut Struct_rte_fdir_masks)
     -> ::libc::c_int;
    pub fn rte_eth_dev_callback_register(port_id: u8,
                                         event: Enum_rte_eth_event_type,
                                         cb_fn: rte_eth_dev_cb_fn,
                                         cb_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rte_eth_dev_callback_unregister(port_id: u8,
                                           event: Enum_rte_eth_event_type,
                                           cb_fn: rte_eth_dev_cb_fn,
                                           cb_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn _rte_eth_dev_callback_process(dev: *mut Struct_rte_eth_dev,
                                         event: Enum_rte_eth_event_type)
     -> ();
    pub fn rte_eth_led_on(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_led_off(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_flow_ctrl_get(port_id: u8,
                                     fc_conf: *mut Struct_rte_eth_fc_conf)
     -> ::libc::c_int;
    pub fn rte_eth_dev_flow_ctrl_set(port_id: u8,
                                     fc_conf: *mut Struct_rte_eth_fc_conf)
     -> ::libc::c_int;
    pub fn rte_eth_dev_priority_flow_ctrl_set(port_id: u8,
                                              pfc_conf:
                                                  *mut Struct_rte_eth_pfc_conf)
     -> ::libc::c_int;
    pub fn rte_eth_dev_mac_addr_add(port: u8,
                                    mac_addr: *mut Struct_ether_addr,
                                    pool: u32) -> ::libc::c_int;
    pub fn rte_eth_dev_mac_addr_remove(port: u8,
                                       mac_addr: *mut Struct_ether_addr)
     -> ::libc::c_int;
    pub fn rte_eth_dev_rss_reta_update(port: u8,
                                       reta_conf:
                                           *mut Struct_rte_eth_rss_reta_entry64,
                                       reta_size: u16) -> ::libc::c_int;
    pub fn rte_eth_dev_rss_reta_query(port: u8,
                                      reta_conf:
                                          *mut Struct_rte_eth_rss_reta_entry64,
                                      reta_size: u16) -> ::libc::c_int;
    pub fn rte_eth_dev_uc_hash_table_set(port: u8,
                                         addr: *mut Struct_ether_addr,
                                         on: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_uc_all_hash_table_set(port: u8, on: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_vf_rxmode(port: u8, vf: u16,
                                     rx_mode: u16, on: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_vf_tx(port: u8, vf: u16, on: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_vf_rx(port: u8, vf: u16, on: u8)
     -> ::libc::c_int;
    pub fn rte_eth_dev_set_vf_vlan_filter(port: u8, vlan_id: u16,
                                          vf_mask: u64, vlan_on: u8)
     -> ::libc::c_int;
    pub fn rte_eth_mirror_rule_set(port_id: u8,
                                   mirror_conf:
                                       *mut Struct_rte_eth_vmdq_mirror_conf,
                                   rule_id: u8, on: u8)
     -> ::libc::c_int;
    pub fn rte_eth_mirror_rule_reset(port_id: u8, rule_id: u8)
     -> ::libc::c_int;
    pub fn rte_eth_set_queue_rate_limit(port_id: u8, queue_idx: u16,
                                        tx_rate: u16) -> ::libc::c_int;
    pub fn rte_eth_set_vf_rate_limit(port_id: u8, vf: u16,
                                     tx_rate: u16, q_msk: u64)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_init(port: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_state_show(port: u8, state: *mut u32)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_state_set(port: u8,
                                        new_state: *mut u32)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_event_show(port: u8, event: u32,
                                         state: *mut u32)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_event_store(port: u8, event: u32,
                                          state: u32) -> ::libc::c_int;
    pub fn rte_eth_dev_wd_timeout_store(port: u8, timeout: u32)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_ver_show(port: u8, ver: *mut u32)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_wd_timeout_show(port: u8,
                                              wd_timeout: *mut u32)
     -> ::libc::c_int;
    pub fn rte_eth_dev_bypass_wd_reset(port: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_rss_hash_update(port_id: u8,
                                       rss_conf: *mut Struct_rte_eth_rss_conf)
     -> ::libc::c_int;
    pub fn rte_eth_dev_rss_hash_conf_get(port_id: u8,
                                         rss_conf:
                                             *mut Struct_rte_eth_rss_conf)
     -> ::libc::c_int;
    pub fn rte_eth_dev_udp_tunnel_add(port_id: u8,
                                      tunnel_udp:
                                          *mut Struct_rte_eth_udp_tunnel)
     -> ::libc::c_int;
    pub fn rte_eth_dev_udp_tunnel_delete(port_id: u8,
                                         tunnel_udp:
                                             *mut Struct_rte_eth_udp_tunnel)
     -> ::libc::c_int;
    pub fn rte_eth_dev_add_syn_filter(port_id: u8,
                                      filter: *mut Struct_rte_syn_filter,
                                      rx_queue: u16) -> ::libc::c_int;
    pub fn rte_eth_dev_remove_syn_filter(port_id: u8) -> ::libc::c_int;
    pub fn rte_eth_dev_get_syn_filter(port_id: u8,
                                      filter: *mut Struct_rte_syn_filter,
                                      rx_queue: *mut u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_add_ethertype_filter(port_id: u8, index: u16,
                                            filter:
                                                *mut Struct_rte_ethertype_filter,
                                            rx_queue: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_remove_ethertype_filter(port_id: u8,
                                               index: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_get_ethertype_filter(port_id: u8, index: u16,
                                            filter:
                                                *mut Struct_rte_ethertype_filter,
                                            rx_queue: *mut u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_add_2tuple_filter(port_id: u8, index: u16,
                                         filter:
                                             *mut Struct_rte_2tuple_filter,
                                         rx_queue: u16) -> ::libc::c_int;
    pub fn rte_eth_dev_remove_2tuple_filter(port_id: u8, index: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_get_2tuple_filter(port_id: u8, index: u16,
                                         filter:
                                             *mut Struct_rte_2tuple_filter,
                                         rx_queue: *mut u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_add_5tuple_filter(port_id: u8, index: u16,
                                         filter:
                                             *mut Struct_rte_5tuple_filter,
                                         rx_queue: u16) -> ::libc::c_int;
    pub fn rte_eth_dev_remove_5tuple_filter(port_id: u8, index: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_get_5tuple_filter(port_id: u8, index: u16,
                                         filter:
                                             *mut Struct_rte_5tuple_filter,
                                         rx_queue: *mut u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_add_flex_filter(port_id: u8, index: u16,
                                       filter: *mut Struct_rte_flex_filter,
                                       rx_queue: u16) -> ::libc::c_int;
    pub fn rte_eth_dev_remove_flex_filter(port_id: u8, index: u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_get_flex_filter(port_id: u8, index: u16,
                                       filter: *mut Struct_rte_flex_filter,
                                       rx_queue: *mut u16)
     -> ::libc::c_int;
    pub fn rte_eth_dev_filter_supported(port_id: u8,
                                        filter_type: Enum_rte_filter_type)
     -> ::libc::c_int;
    pub fn rte_eth_dev_filter_ctrl(port_id: u8,
                                   filter_type: Enum_rte_filter_type,
                                   filter_op: Enum_rte_filter_op,
                                   arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn rte_eth_from_rings(name: *const ::libc::c_char,
                              rx_queues: *const *mut Struct_rte_ring,
                              nb_rx_queues: ::libc::c_uint,
                              tx_queues: *const *mut Struct_rte_ring,
                              nb_tx_queues: ::libc::c_uint,
                              numa_node: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_eth_ring_pair_create(name: *const ::libc::c_char,
                                    numa_node: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn rte_eth_ring_pair_attach(name: *const ::libc::c_char,
                                    numa_node: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn rte_pmd_ring_devinit(name: *const ::libc::c_char,
                                params: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rte_fbk_hash_find_existing(name: *const ::libc::c_char)
     -> *mut Struct_rte_fbk_hash_table;
    pub fn rte_fbk_hash_create(params: *const Struct_rte_fbk_hash_params)
     -> *mut Struct_rte_fbk_hash_table;
    pub fn rte_fbk_hash_free(ht: *mut Struct_rte_fbk_hash_table) -> ();
    pub fn rte_hash_create(params: *const Struct_rte_hash_parameters)
     -> *mut Struct_rte_hash;
    pub fn rte_hash_find_existing(name: *const ::libc::c_char)
     -> *mut Struct_rte_hash;
    pub fn rte_hash_free(h: *mut Struct_rte_hash) -> ();
    pub fn rte_hash_add_key(h: *const Struct_rte_hash,
                            key: *const ::libc::c_void) -> i32;
    pub fn rte_hash_add_key_with_hash(h: *const Struct_rte_hash,
                                      key: *const ::libc::c_void,
                                      sig: hash_sig_t) -> i32;
    pub fn rte_hash_del_key(h: *const Struct_rte_hash,
                            key: *const ::libc::c_void) -> i32;
    pub fn rte_hash_del_key_with_hash(h: *const Struct_rte_hash,
                                      key: *const ::libc::c_void,
                                      sig: hash_sig_t) -> i32;
    pub fn rte_hash_lookup(h: *const Struct_rte_hash,
                           key: *const ::libc::c_void) -> i32;
    pub fn rte_hash_lookup_with_hash(h: *const Struct_rte_hash,
                                     key: *const ::libc::c_void,
                                     sig: hash_sig_t) -> i32;
    pub fn rte_hash_lookup_bulk(h: *const Struct_rte_hash,
                                keys: *mut *const ::libc::c_void,
                                num_keys: u32, positions: *mut i32)
     -> ::libc::c_int;
    pub fn rte_hexdump(f: *mut ::libc::FILE, title: *const ::libc::c_char,
                       buf: *const ::libc::c_void, len: ::libc::c_uint) -> ();
    pub fn rte_memdump(f: *mut ::libc::FILE, title: *const ::libc::c_char,
                       buf: *const ::libc::c_void, len: ::libc::c_uint) -> ();
    pub fn rte_ip_frag_table_create(bucket_num: u32,
                                    bucket_entries: u32,
                                    max_entries: u32,
                                    max_cycles: u64,
                                    socket_id: ::libc::c_int)
     -> *mut Struct_rte_ip_frag_tbl;
    pub fn rte_ipv6_fragment_packet(pkt_in: *mut Struct_rte_mbuf,
                                    pkts_out: *mut *mut Struct_rte_mbuf,
                                    nb_pkts_out: u16, mtu_size: u16,
                                    pool_direct: *mut Struct_rte_mempool,
                                    pool_indirect: *mut Struct_rte_mempool)
     -> i32;
    pub fn rte_ipv6_frag_reassemble_packet(tbl: *mut Struct_rte_ip_frag_tbl,
                                           dr:
                                               *mut Struct_rte_ip_frag_death_row,
                                           mb: *mut Struct_rte_mbuf,
                                           tms: u64,
                                           ip_hdr: *mut Struct_ipv6_hdr,
                                           frag_hdr:
                                               *mut Struct_ipv6_extension_fragment)
     -> *mut Struct_rte_mbuf;
    pub fn rte_ipv4_fragment_packet(pkt_in: *mut Struct_rte_mbuf,
                                    pkts_out: *mut *mut Struct_rte_mbuf,
                                    nb_pkts_out: u16, mtu_size: u16,
                                    pool_direct: *mut Struct_rte_mempool,
                                    pool_indirect: *mut Struct_rte_mempool)
     -> i32;
    pub fn rte_ipv4_frag_reassemble_packet(tbl: *mut Struct_rte_ip_frag_tbl,
                                           dr:
                                               *mut Struct_rte_ip_frag_death_row,
                                           mb: *mut Struct_rte_mbuf,
                                           tms: u64,
                                           ip_hdr: *mut Struct_ipv4_hdr)
     -> *mut Struct_rte_mbuf;
    pub fn rte_ip_frag_free_death_row(dr: *mut Struct_rte_ip_frag_death_row,
                                      prefetch: u32) -> ();
    pub fn rte_ip_frag_table_statistics_dump(f: *mut ::libc::FILE,
                                             tbl:
                                                 *const Struct_rte_ip_frag_tbl)
     -> ();
    pub fn rte_kni_init(max_kni_ifaces: ::libc::c_uint) -> ();
    pub fn rte_kni_alloc(pktmbuf_pool: *mut Struct_rte_mempool,
                         conf: *const Struct_rte_kni_conf,
                         ops: *mut Struct_rte_kni_ops) -> *mut Struct_rte_kni;
    pub fn rte_kni_create(port_id: u8, mbuf_size: ::libc::c_uint,
                          pktmbuf_pool: *mut Struct_rte_mempool,
                          ops: *mut Struct_rte_kni_ops)
     -> *mut Struct_rte_kni;
    pub fn rte_kni_release(kni: *mut Struct_rte_kni) -> ::libc::c_int;
    pub fn rte_kni_handle_request(kni: *mut Struct_rte_kni) -> ::libc::c_int;
    pub fn rte_kni_rx_burst(kni: *mut Struct_rte_kni,
                            mbufs: *mut *mut Struct_rte_mbuf,
                            num: ::libc::c_uint) -> ::libc::c_uint;
    pub fn rte_kni_tx_burst(kni: *mut Struct_rte_kni,
                            mbufs: *mut *mut Struct_rte_mbuf,
                            num: ::libc::c_uint) -> ::libc::c_uint;
    pub fn rte_kni_get_port_id(kni: *mut Struct_rte_kni) -> u8;
    pub fn rte_kni_get(name: *const ::libc::c_char) -> *mut Struct_rte_kni;
    pub fn rte_kni_info_get(port_id: u8) -> *mut Struct_rte_kni;
    pub fn rte_kni_register_handlers(kni: *mut Struct_rte_kni,
                                     ops: *mut Struct_rte_kni_ops)
     -> ::libc::c_int;
    pub fn rte_kni_unregister_handlers(kni: *mut Struct_rte_kni)
     -> ::libc::c_int;
    pub fn rte_kni_close() -> ();
    pub fn rte_kvargs_parse(args: *const ::libc::c_char,
                            valid_keys: *mut *const ::libc::c_char)
     -> *mut Struct_rte_kvargs;
    pub fn rte_kvargs_free(kvlist: *mut Struct_rte_kvargs) -> ();
    pub fn rte_kvargs_process(kvlist: *const Struct_rte_kvargs,
                              key_match: *const ::libc::c_char,
                              handler: arg_handler_t,
                              opaque_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rte_kvargs_count(kvlist: *const Struct_rte_kvargs,
                            key_match: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn rte_lpm6_create(name: *const ::libc::c_char,
                           socket_id: ::libc::c_int,
                           config: *const Struct_rte_lpm6_config)
     -> *mut Struct_rte_lpm6;
    pub fn rte_lpm6_find_existing(name: *const ::libc::c_char)
     -> *mut Struct_rte_lpm6;
    pub fn rte_lpm6_free(lpm: *mut Struct_rte_lpm6) -> ();
    pub fn rte_lpm6_add(lpm: *mut Struct_rte_lpm6, ip: *mut u8,
                        depth: u8, next_hop: u8) -> ::libc::c_int;
    pub fn rte_lpm6_is_rule_present(lpm: *mut Struct_rte_lpm6,
                                    ip: *mut u8, depth: u8,
                                    next_hop: *mut u8) -> ::libc::c_int;
    pub fn rte_lpm6_delete(lpm: *mut Struct_rte_lpm6, ip: *mut u8,
                           depth: u8) -> ::libc::c_int;
    pub fn rte_lpm6_delete_bulk_func(lpm: *mut Struct_rte_lpm6,
                                     ips: *mut [u8; 16us],
                                     depths: *mut u8, n: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn rte_lpm6_delete_all(lpm: *mut Struct_rte_lpm6) -> ();
    pub fn rte_lpm6_lookup(lpm: *const Struct_rte_lpm6, ip: *mut u8,
                           next_hop: *mut u8) -> ::libc::c_int;
    pub fn rte_lpm6_lookup_bulk_func(lpm: *const Struct_rte_lpm6,
                                     ips: *mut [u8; 16us],
                                     next_hops: *mut i16,
                                     n: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_lpm_create(name: *const ::libc::c_char,
                          socket_id: ::libc::c_int, max_rules: ::libc::c_int,
                          flags: ::libc::c_int) -> *mut Struct_rte_lpm;
    pub fn rte_lpm_find_existing(name: *const ::libc::c_char)
     -> *mut Struct_rte_lpm;
    pub fn rte_lpm_free(lpm: *mut Struct_rte_lpm) -> ();
    pub fn rte_lpm_add(lpm: *mut Struct_rte_lpm, ip: u32, depth: u8,
                       next_hop: u8) -> ::libc::c_int;
    pub fn rte_lpm_is_rule_present(lpm: *mut Struct_rte_lpm, ip: u32,
                                   depth: u8, next_hop: *mut u8)
     -> ::libc::c_int;
    pub fn rte_lpm_delete(lpm: *mut Struct_rte_lpm, ip: u32,
                          depth: u8) -> ::libc::c_int;
    pub fn rte_lpm_delete_all(lpm: *mut Struct_rte_lpm) -> ();
    pub fn rte_meter_srtcm_config(m: *mut Struct_rte_meter_srtcm,
                                  params: *mut Struct_rte_meter_srtcm_params)
     -> ::libc::c_int;
    pub fn rte_meter_trtcm_config(m: *mut Struct_rte_meter_trtcm,
                                  params: *mut Struct_rte_meter_trtcm_params)
     -> ::libc::c_int;
    pub fn rte_pipeline_create(params: *mut Struct_rte_pipeline_params)
     -> *mut Struct_rte_pipeline;
    pub fn rte_pipeline_free(p: *mut Struct_rte_pipeline) -> ::libc::c_int;
    pub fn rte_pipeline_check(p: *mut Struct_rte_pipeline) -> ::libc::c_int;
    pub fn rte_pipeline_run(p: *mut Struct_rte_pipeline) -> ::libc::c_int;
    pub fn rte_pipeline_flush(p: *mut Struct_rte_pipeline) -> ::libc::c_int;
    pub fn rte_pipeline_table_create(p: *mut Struct_rte_pipeline,
                                     params:
                                         *mut Struct_rte_pipeline_table_params,
                                     table_id: *mut u32)
     -> ::libc::c_int;
    pub fn rte_pipeline_table_default_entry_add(p: *mut Struct_rte_pipeline,
                                                table_id: u32,
                                                default_entry:
                                                    *mut Struct_rte_pipeline_table_entry,
                                                default_entry_ptr:
                                                    *mut *mut Struct_rte_pipeline_table_entry)
     -> ::libc::c_int;
    pub fn rte_pipeline_table_default_entry_delete(p:
                                                       *mut Struct_rte_pipeline,
                                                   table_id: u32,
                                                   entry:
                                                       *mut Struct_rte_pipeline_table_entry)
     -> ::libc::c_int;
    pub fn rte_pipeline_table_entry_add(p: *mut Struct_rte_pipeline,
                                        table_id: u32,
                                        key: *mut ::libc::c_void,
                                        entry:
                                            *mut Struct_rte_pipeline_table_entry,
                                        key_found: *mut ::libc::c_int,
                                        entry_ptr:
                                            *mut *mut Struct_rte_pipeline_table_entry)
     -> ::libc::c_int;
    pub fn rte_pipeline_table_entry_delete(p: *mut Struct_rte_pipeline,
                                           table_id: u32,
                                           key: *mut ::libc::c_void,
                                           key_found: *mut ::libc::c_int,
                                           entry:
                                               *mut Struct_rte_pipeline_table_entry)
     -> ::libc::c_int;
    pub fn rte_pipeline_port_in_create(p: *mut Struct_rte_pipeline,
                                       params:
                                           *mut Struct_rte_pipeline_port_in_params,
                                       port_id: *mut u32)
     -> ::libc::c_int;
    pub fn rte_pipeline_port_in_connect_to_table(p: *mut Struct_rte_pipeline,
                                                 port_id: u32,
                                                 table_id: u32)
     -> ::libc::c_int;
    pub fn rte_pipeline_port_in_enable(p: *mut Struct_rte_pipeline,
                                       port_id: u32) -> ::libc::c_int;
    pub fn rte_pipeline_port_in_disable(p: *mut Struct_rte_pipeline,
                                        port_id: u32) -> ::libc::c_int;
    pub fn rte_pipeline_port_out_create(p: *mut Struct_rte_pipeline,
                                        params:
                                            *mut Struct_rte_pipeline_port_out_params,
                                        port_id: *mut u32)
     -> ::libc::c_int;
    pub fn rte_pipeline_port_out_packet_insert(p: *mut Struct_rte_pipeline,
                                               port_id: u32,
                                               pkt: *mut Struct_rte_mbuf)
     -> ::libc::c_int;
    pub fn rte_sched_port_config(params: *mut Struct_rte_sched_port_params)
     -> *mut Struct_rte_sched_port;
    pub fn rte_sched_port_free(port: *mut Struct_rte_sched_port) -> ();
    pub fn rte_sched_subport_config(port: *mut Struct_rte_sched_port,
                                    subport_id: u32,
                                    params:
                                        *mut Struct_rte_sched_subport_params)
     -> ::libc::c_int;
    pub fn rte_sched_pipe_config(port: *mut Struct_rte_sched_port,
                                 subport_id: u32, pipe_id: u32,
                                 pipe_profile: i32) -> ::libc::c_int;
    pub fn rte_sched_port_get_memory_footprint(params:
                                                   *mut Struct_rte_sched_port_params)
     -> u32;
    pub fn rte_sched_subport_read_stats(port: *mut Struct_rte_sched_port,
                                        subport_id: u32,
                                        stats:
                                            *mut Struct_rte_sched_subport_stats,
                                        tc_ov: *mut u32)
     -> ::libc::c_int;
    pub fn rte_sched_queue_read_stats(port: *mut Struct_rte_sched_port,
                                      queue_id: u32,
                                      stats:
                                          *mut Struct_rte_sched_queue_stats,
                                      qlen: *mut u16) -> ::libc::c_int;
    pub fn rte_sched_port_enqueue(port: *mut Struct_rte_sched_port,
                                  pkts: *mut *mut Struct_rte_mbuf,
                                  n_pkts: u32) -> ::libc::c_int;
    pub fn rte_sched_port_dequeue(port: *mut Struct_rte_sched_port,
                                  pkts: *mut *mut Struct_rte_mbuf,
                                  n_pkts: u32) -> ::libc::c_int;
    pub fn rte_power_set_env(env: Enum_power_management_env) -> ::libc::c_int;
    pub fn rte_power_unset_env() -> ();
    pub fn rte_power_get_env() -> Enum_power_management_env;
    pub fn rte_power_init(lcore_id: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_power_exit(lcore_id: ::libc::c_uint) -> ::libc::c_int;
    pub fn rte_red_rt_data_init(red: *mut Struct_rte_red) -> ::libc::c_int;
    pub fn rte_red_config_init(red_cfg: *mut Struct_rte_red_config,
                               wq_log2: u16, min_th: u16,
                               max_th: u16, maxp_inv: u16)
     -> ::libc::c_int;
    pub fn rte_timer_subsystem_init() -> ();
    pub fn rte_timer_init(tim: *mut Struct_rte_timer) -> ();
    pub fn rte_timer_reset(tim: *mut Struct_rte_timer, ticks: u64,
                           _type: Enum_rte_timer_type,
                           tim_lcore: ::libc::c_uint, fct: rte_timer_cb_t,
                           arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn rte_timer_reset_sync(tim: *mut Struct_rte_timer, ticks: u64,
                                _type: Enum_rte_timer_type,
                                tim_lcore: ::libc::c_uint,
                                fct: rte_timer_cb_t, arg: *mut ::libc::c_void)
     -> ();
    pub fn rte_timer_stop(tim: *mut Struct_rte_timer) -> ::libc::c_int;
    pub fn rte_timer_stop_sync(tim: *mut Struct_rte_timer) -> ();
    pub fn rte_timer_pending(tim: *mut Struct_rte_timer) -> ::libc::c_int;
    pub fn rte_timer_manage() -> ();
    pub fn rte_timer_dump_stats(f: *mut ::libc::FILE) -> ();
}
